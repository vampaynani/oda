// Generated by CoffeeScript 1.6.3
(function() {
  var U3A2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  U3A2 = (function(_super) {
    __extends(U3A2, _super);

    function U3A2() {
      this.nextEvaluation = __bind(this.nextEvaluation, this);
      this.finishEvaluation = __bind(this.finishEvaluation, this);
      this.evaluateAnswer = __bind(this.evaluateAnswer, this);
      this.evaluateClick = __bind(this.evaluateClick, this);
      this.initEvaluation = __bind(this.initEvaluation, this);
      var manifest, sounds;
      manifest = [
        {
          id: 'head',
          src: 'pleca1.png'
        }, {
          id: 'inst',
          src: 'inst.png'
        }, {
          id: 'c1',
          src: 'circle1.png'
        }, {
          id: 'c2',
          src: 'circle2.png'
        }, {
          id: 'repeatbtn',
          src: 'repeat-btn.png'
        }, {
          id: 'playagain',
          src: 'play_again.png'
        }, {
          id: 'startgame',
          src: 'start_game.png'
        }, {
          id: 'guia1',
          src: 'guia1.png'
        }, {
          id: 'guia2',
          src: 'guia2.png'
        }, {
          id: 'guia3',
          src: 'guia3.png'
        }, {
          id: 'btnNoHeDoesnt',
          src: 'btn_NoHeDoesnt.png'
        }, {
          id: 'btnNoSheDoesnt',
          src: 'btn_NoSheDoesnt.png'
        }, {
          id: 'btnNoTheyDont',
          src: 'btn_NoTheyDont.png'
        }, {
          id: 'btnYesHeDoes',
          src: 'btn_YesHeDoes.png'
        }, {
          id: 'btnYesSheDoes',
          src: 'btn_YesSheDoes.png'
        }, {
          id: 'btnYesTheyDo',
          src: 'btn_YesTheyDo.png'
        }, {
          id: 'mattno',
          src: 'matt_no.png'
        }, {
          id: 'mattyes',
          src: 'matt_yes.png'
        }, {
          id: 'patno',
          src: 'pat_no.png'
        }, {
          id: 'patyes',
          src: 'pat_yes.png'
        }, {
          id: 'labelmatt',
          src: 'label_matt.png'
        }, {
          id: 'labelpat',
          src: 'label_pat.png'
        }, {
          id: 'lineastable1',
          src: 'lineas-table1.png'
        }, {
          id: 'lineastable2',
          src: 'lineas-table2.png'
        }, {
          id: 'lineastable3',
          src: 'lineas-table3.png'
        }, {
          id: 'table1foodmattno',
          src: 'table1/food_matt_no.png'
        }, {
          id: 'table1foodmattyes',
          src: 'table1/food_matt_yes.png'
        }, {
          id: 'table1foodpatno',
          src: 'table1/food_pat_no.png'
        }, {
          id: 'table1foodpatyes',
          src: 'table1/food_pat_yes.png'
        }, {
          id: 'table2foodmattno',
          src: 'table2/food_matt_no.png'
        }, {
          id: 'table2foodmattyes',
          src: 'table2/food_matt_yes.png'
        }, {
          id: 'table2foodpatno',
          src: 'table2/food_pat_no.png'
        }, {
          id: 'table2foodpatyes',
          src: 'table2/food_pat_yes.png'
        }, {
          id: 'table3foodmattno',
          src: 'table3/food_matt_no.png'
        }, {
          id: 'table3foodmattyes',
          src: 'table3/food_matt_yes.png'
        }, {
          id: 'table3foodpatno',
          src: 'table3/food_pat_no.png'
        }, {
          id: 'table3foodpatyes',
          src: 'table3/food_pat_yes.png'
        }
      ];
      sounds = [
        {
          src: 'sounds/boing.mp3',
          id: 'boing'
        }, {
          src: 'sounds/good.mp3',
          id: 'good'
        }, {
          src: 'sounds/TU2_U3_A2_instructions.mp3',
          id: 'instructions'
        }
      ];
      this.game = {
        common: [
          {
            id: 'mattno',
            x: '606',
            y: '116'
          }, {
            id: 'mattyes',
            x: '464',
            y: '121'
          }, {
            id: 'patno',
            x: '274',
            y: '124'
          }, {
            id: 'patyes',
            x: '127',
            y: '123'
          }, {
            id: 'labelmatt',
            x: '569',
            y: '233'
          }, {
            id: 'labelpat',
            x: '235',
            y: '233'
          }
        ],
        buttons: [
          {
            id: 'btnYesTheyDo',
            x: '166',
            y: '485'
          }, {
            id: 'btnYesHeDoes',
            x: '361',
            y: '485'
          }, {
            id: 'btnYesSheDoes',
            x: '555',
            y: '485'
          }, {
            id: 'btnNoTheyDont',
            x: '166',
            y: '539'
          }, {
            id: 'btnNoHeDoesnt',
            x: '361',
            y: '539'
          }, {
            id: 'btnNoSheDoesnt',
            x: '555',
            y: '539'
          }
        ],
        m1: [
          {
            id: 'lineastable1',
            x: '150',
            y: '245'
          }, {
            id: 'table1foodmattno',
            x: '594',
            y: '285'
          }, {
            id: 'table1foodmattyes',
            x: '424',
            y: '294'
          }, {
            id: 'table1foodpatno',
            x: '265',
            y: '319'
          }, {
            id: 'table1foodpatyes',
            x: '84',
            y: '306'
          }
        ],
        m2: [
          {
            id: 'lineastable2',
            x: '182',
            y: '216'
          }, {
            id: 'table2foodmattyes',
            x: '431',
            y: '310'
          }, {
            id: 'table2foodmattno',
            x: '612',
            y: '307'
          }, {
            id: 'table2foodpatno',
            x: '284',
            y: '313'
          }, {
            id: 'table2foodpatyes',
            x: '81',
            y: '320'
          }
        ],
        m3: [
          {
            id: 'lineastable3',
            x: '163',
            y: '227'
          }, {
            id: 'table3foodpatyes',
            x: '96',
            y: '311'
          }, {
            id: 'table3foodmattno',
            x: '629',
            y: '333'
          }, {
            id: 'table3foodmattyes',
            x: '447',
            y: '311'
          }, {
            id: 'table3foodpatno',
            x: '255',
            y: '327'
          }
        ]
      };
      this.answers = [
        {
          values: [
            {
              text: 'Does Pat like salad?',
              index: 6
            }, {
              text: 'Does Matt like beets?',
              index: 5
            }, {
              text: 'Do Pat and Matt like beets?',
              index: 4
            }, {
              text: 'Does Pat like corn?',
              index: 3
            }, {
              text: 'Do Pat and Matt like steak?',
              index: 1
            }, {
              text: 'Does Matt like salad?',
              index: 2
            }
          ]
        }, {
          values: [
            {
              text: 'Does Pat like pineapple?',
              index: 6
            }, {
              text: 'Does Pat like ham?',
              index: 3
            }, {
              text: 'Does Matt like grapes?',
              index: 5
            }, {
              text: 'Do Matt and Pat like ham?',
              index: 1
            }, {
              text: 'Does Matt like eggs?',
              index: 5
            }, {
              text: 'Does Pat like grapes?',
              index: 3
            }
          ]
        }, {
          values: [
            {
              text: 'Do Matt and Pat like milk?',
              index: 1
            }, {
              text: 'Does Matt like cherries?',
              index: 2
            }, {
              text: 'Does Matt like cheese?',
              index: 5
            }, {
              text: 'Does Pat like milk?',
              index: 3
            }, {
              text: 'Does Pat like cherries?',
              index: 6
            }, {
              text: 'Do Matt and Pat like cucumbers?',
              index: 4
            }
          ]
        }
      ];
      U3A2.__super__.constructor.call(this, null, manifest, sounds);
    }

    U3A2.prototype.setStage = function() {
      U3A2.__super__.setStage.apply(this, arguments);
      this.insertBitmap('header', 'head', stageSize.w / 2, 0, 'tc');
      this.insertBitmap('instructions', 'inst', 20, 100);
      this.addToMain(new Score('score', this.preload.getResult('c1'), this.preload.getResult('c2'), 20, 500, 18, 0));
      return this.setCommon().setMenu(1).introEvaluation();
    };

    U3A2.prototype.setCommon = function() {
      var common, i, v, value, _i, _j, _len, _ref, _ref1;
      common = new createjs.Container();
      common.name = 'common';
      _ref = this.game.common;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        v = this.createBitmap(value.id, value.id, value.x, value.y);
        common.addChild(v);
        this.addToLibrary(v);
      }
      for (i = _j = 1, _ref1 = this.game.buttons.length; _j <= _ref1; i = _j += 1) {
        value = this.game.buttons[i - 1];
        v = this.createBitmap("b" + i, value.id, value.x, value.y);
        common.addChild(v);
        this.addToLibrary(v);
      }
      this.phrase = new createjs.Text('', '20px Arial', '#333333');
      this.phrase.name = 'phrase';
      this.phrase.textAlign = 'center';
      this.phrase.x = stageSize.w / 2;
      this.phrase.y = 440;
      this.addToMain(common, this.phrase);
      return this;
    };

    U3A2.prototype.setMenu = function(num) {
      var menu, v, value, _i, _len, _ref;
      menu = new createjs.Container();
      menu.name = 'menu';
      _ref = this.game["m" + num];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        v = this.createBitmap(value.id, value.id, value.x, value.y);
        menu.addChild(v);
        this.addToLibrary(v);
      }
      this.addToMain(menu);
      return this;
    };

    U3A2.prototype.introEvaluation = function() {
      U3A2.__super__.introEvaluation.apply(this, arguments);
      TweenLite.from(this.library['header'], 1, {
        y: -this.library['header'].height
      });
      TweenLite.from(this.library['instructions'], 1, {
        alpha: 0,
        x: 0,
        delay: 0.5
      });
      TweenLite.from(this.library['common'], 1, {
        alpha: 0,
        y: this.library['common'].y - 20,
        delay: 1
      });
      return TweenLite.from(this.library['menu'], 1, {
        alpha: 0,
        y: this.library['menu'].y - 20,
        delay: 1.2,
        onComplete: this.playInstructions,
        onCompleteParams: [this]
      });
    };

    U3A2.prototype.initEvaluation = function(e) {
      var i, _i, _ref;
      U3A2.__super__.initEvaluation.apply(this, arguments);
      this.a_index = 0;
      this.phrase.text = this.answers[this.index].values[this.a_index].text;
      for (i = _i = 1, _ref = this.game.buttons.length; _i <= _ref; i = _i += 1) {
        this.library["b" + i].index = i;
        this.library["b" + i].addEventListener('click', this.evaluateClick);
      }
      return TweenLite.from(this.library['phrase'], 1, {
        alpha: 0
      });
    };

    U3A2.prototype.evaluateClick = function(e) {
      this.answer = e.target;
      if (this.answer.index === this.answers[this.index].values[this.a_index].index) {
        this.library['score'].plusOne();
        createjs.Sound.play('good');
      } else {
        this.warning();
      }
      return TweenLite.to(this.library['phrase'], 1, {
        alpha: 0,
        onComplete: this.evaluateAnswer
      });
    };

    U3A2.prototype.evaluateAnswer = function() {
      this.a_index++;
      if (this.a_index < this.answers[this.index].values.length) {
        this.phrase.text = this.answers[this.index].values[this.a_index].text;
        return TweenLite.to(this.library['phrase'], 1, {
          alpha: 1
        });
      } else {
        return setTimeout(this.finishEvaluation, 1 * 1000);
      }
    };

    U3A2.prototype.finishEvaluation = function() {
      return TweenLite.to(this.library['menu'], 1, {
        alpha: 0,
        y: this.library['menu'].y - 20,
        ease: Back.easeOut,
        onComplete: this.nextEvaluation
      });
    };

    U3A2.prototype.nextEvaluation = function() {
      this.index++;
      if (this.index < this.answers.length) {
        this.a_index = 0;
        this.phrase.text = this.answers[this.index].values[this.a_index].text;
        this.setMenu(this.index + 1);
        TweenLite.to(this.library['phrase'], 1, {
          alpha: 1
        });
        return TweenLite.to(this.library['menu'], 1, {
          alpha: 1,
          y: 0
        });
      } else {
        return this.finish();
      }
    };

    U3A2.prototype.finish = function() {
      return U3A2.__super__.finish.apply(this, arguments);
    };

    window.U3A2 = U3A2;

    return U3A2;

  })(Oda);

}).call(this);
