// Generated by CoffeeScript 1.6.3
(function() {
  var U5A2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  U5A2 = (function(_super) {
    __extends(U5A2, _super);

    function U5A2() {
      this.repeatSound = __bind(this.repeatSound, this);
      this.nextEvaluation = __bind(this.nextEvaluation, this);
      this.finishEvaluation = __bind(this.finishEvaluation, this);
      this.evaluateAnswer = __bind(this.evaluateAnswer, this);
      this.initEvaluation = __bind(this.initEvaluation, this);
      this.filterByID = __bind(this.filterByID, this);
      var manifest, sounds;
      manifest = [
        {
          id: 'head',
          src: 'pleca1.png'
        }, {
          id: 'inst',
          src: 'inst.png'
        }, {
          id: 'c1',
          src: 'circle1.png'
        }, {
          id: 'c2',
          src: 'circle2.png'
        }, {
          id: 'repeatbtn',
          src: 'repeat-btn.png'
        }, {
          id: 'playagain',
          src: 'play_again.png'
        }, {
          id: 'startgame',
          src: 'start_game.png'
        }, {
          id: 'windy',
          src: 'windy_image.png'
        }, {
          id: 'sunny',
          src: 'sunny_image.png'
        }, {
          id: 'snowy',
          src: 'snowing_image.png'
        }, {
          id: 'rainy',
          src: 'raining_image.png'
        }, {
          id: 'cloudy',
          src: 'cloudy_image.png'
        }
      ];
      sounds = [
        {
          src: 'sounds/good.mp3',
          id: 'good'
        }, {
          src: 'sounds/TU2_U5_A2_instructions.mp3',
          id: 'instructions'
        }, {
          src: 'sounds/TU2_U5_A2_raining.mp3',
          id: 'sraining'
        }, {
          src: 'sounds/TU2_U5_A2_cloudy.mp3',
          id: 'scloudy'
        }, {
          src: 'sounds/TU2_U5_A2_snowing.mp3',
          id: 'ssnowing'
        }, {
          src: 'sounds/TU2_U5_A2_sunny.mp3',
          id: 'ssunny'
        }, {
          src: 'sounds/TU2_U5_A2_windy.mp3',
          id: 'swindy'
        }, {
          src: 'sounds/wrong.mp3',
          id: 'wrong'
        }
      ];
      this.game = {
        steps: [
          {
            id: 'windy',
            texts: ['my jacket.', 'my sweater.']
          }, {
            id: 'sunny',
            texts: ['my swimsuit.', 'my jacket.']
          }, {
            id: 'rainy',
            texts: ['my raincoat.', 'my umbrella.']
          }, {
            id: 'snowy',
            texts: ['my boots.', 'my coat.']
          }, {
            id: 'cloudy',
            texts: ['my swimsuit.', 'my jeans.']
          }
        ]
      };
      U5A2.__super__.constructor.call(this, null, manifest, sounds);
    }

    U5A2.prototype.filterByID = function(x) {
      return x !== this.selected;
    };

    U5A2.prototype.setStage = function() {
      var choose, i, step, steps, stepsView;
      U5A2.__super__.setStage.apply(this, arguments);
      steps = this.shuffle(this.game.steps);
      steps = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = steps.length; _i < _len; _i++) {
          step = steps[_i];
          _results.push(step.id);
        }
        return _results;
      })();
      i = 0;
      this.selected = steps[i];
      stepsView = steps.filter(this.filterByID);
      stepsView = this.shuffle(stepsView);
      choose = new ChooseBitmap('chooser', this.preload.getResult(this.selected), this.preload.getResult(stepsView[0]), 2, 0, 200);
      choose.addEventListener('selection', function(e) {
        return console.log(e);
      });
      return this.addToMain(choose);
      /*
      		@insertBitmap 'header', 'head', stageSize.w / 2, 0, 'tc'
      		@insertBitmap 'instructions', 'inst', 20, 100
      
      		v = @createSprite 'choose1', ['windy', 'sunny', 'snowing', 'raining', 'cloudy'], {windy:0, sunny:1, snowing:2, raining:3, cloudy:4}, (stageSize.w / 4) + 25, 251, 'mc'
      		v.scaleX = v.scaleY = 0.6
      		@addToMain v
      
      		v = @createSprite 'choose2', ['windy', 'sunny', 'snowing', 'raining', 'cloudy'], {windy:0, sunny:1, snowing:2, raining:3, cloudy:4}, (stageSize.w / 4)*3-25, 251, 'mc'
      		v.scaleX = v.scaleY = 0.6
      		@addToMain v
      
      		opciones = new createjs.Container()
      
      
      		sujeto = new createjs.Text 'I ','24px Arial','#333'
      		opciones.addChild sujeto
      
      		uno = new ClickableText 'want', 'want', 1, sujeto.x + sujeto.getMeasuredWidth(), 0
      		uno.setFont '24px Arial'
      		opciones.addChild uno
      
      		diagonal = new createjs.Text ' / ','24px Arial','#333'
      		diagonal.x = uno.x + uno.width
      		opciones.addChild diagonal
      
      		dos = new ClickableText " don't want","don't want ", 2,  diagonal.x + 24, 0
      		dos.setFont '24px Arial'
      		opciones.addChild dos
      
      		frase = new createjs.Text @textos[0],'24px Arial','#333'
      		frase.x = dos.x + dos.width
      		opciones.addChild frase
      
      		total = uno.width + dos.width + 12 + sujeto.getMeasuredWidth() + frase.getMeasuredWidth() + diagonal.getMeasuredWidth()
      		
      		opciones.x = (stageSize.w / 2) - total / 2
      		opciones.y = 400;
      		@addToMain opciones
      
      		@addToMain new Score 'score', (@preload.getResult 'c1'), (@preload.getResult 'c2'), 20, 500, 5, 0
      		@introEvaluation()
      */

    };

    U5A2.prototype.introEvaluation = function() {
      return U5A2.__super__.introEvaluation.apply(this, arguments);
      /*
      		for i in [1..6] by 1
      			@observer.subscribe 'init_evaluation', @library['name'+i].onInitEvaluation
      
      		@library['characters'].currentFrame = @answers[@index].id
      
      		TweenLite.from @library['header'], 1, {y:-@library['header'].height}
      		TweenLite.from @library['instructions'], 1, {alpha :0, x: 0, delay: 0.5}
      		TweenLite.from @library['names'], 1, {alpha: 0, y: @library['names'].y + 50, delay: 1}
      		TweenLite.from @library['dropname'], 1, {alpha: 0, y: @library['dropname'].y + 50, delay: 1}
      		TweenLite.from @library['characters'], 1, {alpha: 0, y: @library['characters'].y + 20, delay: 1.5, onComplete: @playInstructions, onCompleteParams: [@]}
      */

    };

    U5A2.prototype.initEvaluation = function(e) {
      U5A2.__super__.initEvaluation.apply(this, arguments);
      this.library['characters'].currentFrame = this.answers[this.index].id;
      createjs.Sound.play(this.answers[this.index].sound);
      return TweenLite.to(this.library['characters'], 0.5, {
        alpha: 1,
        y: stageSize.h - 180,
        ease: Quart.easeOut
      });
    };

    U5A2.prototype.evaluateAnswer = function(e) {
      var pt;
      this.answer = e.target;
      pt = this.library['dropname'].globalToLocal(this.stage.mouseX, this.stage.mouseY);
      if (this.library['dropname'].hitTest(pt.x, pt.y)) {
        if (this.answer.index === this.answers[this.index].id) {
          this.answer.blink(false);
          return setTimeout(this.finishEvaluation, 1 * 1000);
        } else {
          this.warning();
          return this.answer.returnToPlace();
        }
      } else {
        return this.answer.returnToPlace();
      }
    };

    U5A2.prototype.finishEvaluation = function() {
      TweenLite.to(this.library['characters'], 0.5, {
        alpha: 0,
        y: -200,
        ease: Back.easeOut,
        onComplete: this.nextEvaluation
      });
      return this.answer.returnToPlace();
    };

    U5A2.prototype.nextEvaluation = function() {
      this.index++;
      if (this.index < this.answers.length) {
        this.library['score'].updateCount(this.index);
        this.library['characters'].alpha = 1;
        this.library['characters'].y = stageSize.h - 180;
        this.library['characters'].currentFrame = this.answers[this.index].id;
        createjs.Sound.play(this.answers[this.index].sound);
        return TweenLite.from(this.library['characters'], 0.5, {
          alpha: 0,
          y: this.library['characters'].y + 20,
          ease: Quart.easeOut
        });
      } else {
        return this.finish();
      }
    };

    U5A2.prototype.repeatSound = function() {
      return createjs.Sound.play(this.answers[this.index].sound);
    };

    U5A2.prototype.finish = function() {
      var i, _i, _results;
      U5A2.__super__.finish.apply(this, arguments);
      _results = [];
      for (i = _i = 1; _i <= 6; i = _i += 1) {
        _results.push(this.library['name' + i].blink(false));
      }
      return _results;
    };

    window.U5A2 = U5A2;

    return U5A2;

  })(Oda);

}).call(this);
