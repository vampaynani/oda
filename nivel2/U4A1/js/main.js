// Generated by CoffeeScript 1.6.3
(function() {
  var U4A1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  U4A1 = (function(_super) {
    __extends(U4A1, _super);

    function U4A1() {
      this.repeatSound = __bind(this.repeatSound, this);
      this.nextEvaluation = __bind(this.nextEvaluation, this);
      this.finishEvaluation = __bind(this.finishEvaluation, this);
      this.evaluateAnswer = __bind(this.evaluateAnswer, this);
      this.initEvaluation = __bind(this.initEvaluation, this);
      var manifest, sounds;
      manifest = [
        {
          id: 'head',
          src: 'pleca.png'
        }, {
          id: 'inst',
          src: 'texto_look.png'
        }, {
          id: 'repeatbtn',
          src: 'repeat-btn.png'
        }, {
          id: 'playagain',
          src: 'play_again.png'
        }, {
          id: 'startgame',
          src: 'start_game.png'
        }, {
          id: 'scoreYou',
          src: 'score_you.png'
        }, {
          id: 'scoreComputer',
          src: 'score_computer.png'
        }, {
          id: 'c1',
          src: 'circle1.png'
        }, {
          id: 'c2',
          src: 'circle2.png'
        }, {
          id: 'borde1',
          src: 'border0001.png'
        }, {
          id: 'borde2',
          src: 'border0002.png'
        }, {
          id: 'borde3',
          src: 'border0003.png'
        }, {
          id: 'beak',
          src: 'beak.png'
        }, {
          id: 'bear',
          src: 'bear.png'
        }, {
          id: 'camel',
          src: 'camel.png'
        }, {
          id: 'chimpanzee',
          src: 'chimpanzee.png'
        }, {
          id: 'claws',
          src: 'claws.png'
        }, {
          id: 'crocodile',
          src: 'crocodile.png'
        }, {
          id: 'dolphin',
          src: 'dolphin.png'
        }, {
          id: 'eagle',
          src: 'eagle.png'
        }, {
          id: 'elephant',
          src: 'elephant.png'
        }, {
          id: 'feathers',
          src: 'feathers.png'
        }, {
          id: 'fins',
          src: 'fins.png'
        }, {
          id: 'fish',
          src: 'fish.png'
        }, {
          id: 'fox',
          src: 'fox.png'
        }, {
          id: 'frog',
          src: 'frog.png'
        }, {
          id: 'fur',
          src: 'fur.png'
        }, {
          id: 'giraffe',
          src: 'giraffe.png'
        }, {
          id: 'gorilla',
          src: 'gorilla.png'
        }, {
          id: 'jaguar',
          src: 'jaguar.png'
        }, {
          id: 'lion',
          src: 'lion.png'
        }, {
          id: 'list',
          src: 'list.txt'
        }, {
          id: 'monkey',
          src: 'monkey.png'
        }, {
          id: 'octopus',
          src: 'octopus.png'
        }, {
          id: 'owl',
          src: 'owl.png'
        }, {
          id: 'panda',
          src: 'panda.png'
        }, {
          id: 'parrot',
          src: 'parrot.png'
        }, {
          id: 'paws',
          src: 'paws.png'
        }, {
          id: 'penguin',
          src: 'penguin.png'
        }, {
          id: 'polarbear',
          src: 'polar-bear.png'
        }, {
          id: 'python',
          src: 'python.png'
        }, {
          id: 'rhino',
          src: 'rhino.png'
        }, {
          id: 'scales',
          src: 'scales.png'
        }, {
          id: 'sea-turtle',
          src: 'sea-turtle.png'
        }, {
          id: 'shark',
          src: 'shark.png'
        }, {
          id: 'snake',
          src: 'snake.png'
        }, {
          id: 'tail',
          src: 'tail.png'
        }, {
          id: 'tiger',
          src: 'tiger.png'
        }, {
          id: 'whale',
          src: 'whale.png'
        }, {
          id: 'whiskers',
          src: 'whiskers.png'
        }, {
          id: 'wings',
          src: 'wings.png'
        }, {
          id: 'zebra',
          src: 'zebra.png'
        }
      ];
      sounds = [
        {
          src: 'sounds/boing.mp3',
          id: 'boing'
        }, {
          src: 'sounds/TU2_U4_A1_instructions.mp3',
          id: 'instructions'
        }, {
          id: 'beakSound',
          src: 'sounds/beak.mp3'
        }, {
          id: 'bearSound',
          src: 'sounds/bear.mp3'
        }, {
          id: 'camelSound',
          src: 'sounds/camel.mp3'
        }, {
          id: 'chimpanzeeSound',
          src: 'sounds/chimpanzee.mp3'
        }, {
          id: 'clawsSound',
          src: 'sounds/claws.mp3'
        }, {
          id: 'crocodileSound',
          src: 'sounds/crocodile.mp3'
        }, {
          id: 'dolphinSound',
          src: 'sounds/dolphin.mp3'
        }, {
          id: 'eagleSound',
          src: 'sounds/eagle.mp3'
        }, {
          id: 'elephantSound',
          src: 'sounds/elephant.mp3'
        }, {
          id: 'feathersSound',
          src: 'sounds/feathers.mp3'
        }, {
          id: 'finsSound',
          src: 'sounds/fins.mp3'
        }, {
          id: 'fishSound',
          src: 'sounds/fish.mp3'
        }, {
          id: 'foxSound',
          src: 'sounds/fox.mp3'
        }, {
          id: 'frogSound',
          src: 'sounds/frog.mp3'
        }, {
          id: 'furSound',
          src: 'sounds/fur.mp3'
        }, {
          id: 'giraffeSound',
          src: 'sounds/giraffe.mp3'
        }, {
          id: 'gorillaSound',
          src: 'sounds/gorilla.mp3'
        }, {
          id: 'jaguarSound',
          src: 'sounds/jaguar.mp3'
        }, {
          id: 'lionSound',
          src: 'sounds/lion.mp3'
        }, {
          id: 'listSound',
          src: 'sounds/list.txt'
        }, {
          id: 'monkeySound',
          src: 'sounds/monkey.mp3'
        }, {
          id: 'octopusSound',
          src: 'sounds/octopus.mp3'
        }, {
          id: 'owlSound',
          src: 'sounds/owl.mp3'
        }, {
          id: 'pandaSound',
          src: 'sounds/panda.mp3'
        }, {
          id: 'parrotSound',
          src: 'sounds/parrot.mp3'
        }, {
          id: 'pawsSound',
          src: 'sounds/paws.mp3'
        }, {
          id: 'penguinSound',
          src: 'sounds/penguin.mp3'
        }, {
          id: 'polarbearSound',
          src: 'sounds/polar-bear.mp3'
        }, {
          id: 'pythonSound',
          src: 'sounds/python.mp3'
        }, {
          id: 'rhinoSound',
          src: 'sounds/rhino.mp3'
        }, {
          id: 'scalesSound',
          src: 'sounds/scales.mp3'
        }, {
          id: 'sea-turtleSound',
          src: 'sounds/sea-turtle.mp3'
        }, {
          id: 'sharkSound',
          src: 'sounds/shark.mp3'
        }, {
          id: 'snakeSound',
          src: 'sounds/snake.mp3'
        }, {
          id: 'tailSound',
          src: 'sounds/tail.mp3'
        }, {
          id: 'tigerSound',
          src: 'sounds/tiger.mp3'
        }, {
          id: 'whaleSound',
          src: 'sounds/whale.mp3'
        }, {
          id: 'whiskersSound',
          src: 'sounds/whiskers.mp3'
        }, {
          id: 'wingsSound',
          src: 'sounds/wings.mp3'
        }, {
          id: 'zebraSound',
          src: 'sounds/zebra.mp3'
        }
      ];
      this.answers = [];
      this.animals = [
        {
          id: 'beak'
        }, {
          id: 'bear'
        }, {
          id: 'camel'
        }, {
          id: 'chimpanzee'
        }, {
          id: 'claws'
        }, {
          id: 'crocodile'
        }, {
          id: 'dolphin'
        }, {
          id: 'eagle'
        }, {
          id: 'elephant'
        }, {
          id: 'feathers'
        }, {
          id: 'fins'
        }, {
          id: 'fish'
        }, {
          id: 'fox'
        }, {
          id: 'frog'
        }, {
          id: 'fur'
        }, {
          id: 'giraffe'
        }, {
          id: 'gorilla'
        }, {
          id: 'jaguar'
        }, {
          id: 'lion'
        }, {
          id: 'list'
        }, {
          id: 'monkey'
        }, {
          id: 'octopus'
        }, {
          id: 'owl'
        }, {
          id: 'panda'
        }, {
          id: 'parrot'
        }, {
          id: 'paws'
        }, {
          id: 'penguin'
        }, {
          id: 'polarbear'
        }, {
          id: 'python'
        }, {
          id: 'rhino'
        }, {
          id: 'scales'
        }, {
          id: 'sea-turtle'
        }, {
          id: 'shark'
        }, {
          id: 'snake'
        }, {
          id: 'tail'
        }, {
          id: 'tiger'
        }, {
          id: 'whale'
        }, {
          id: 'whiskers'
        }, {
          id: 'wings'
        }, {
          id: 'zebra'
        }
      ];
      U4A1.__super__.constructor.call(this, null, manifest, sounds);
    }

    U4A1.prototype.setStage = function() {
      U4A1.__super__.setStage.apply(this, arguments);
      this.insertBitmap('header', 'head', stageSize.w / 2, 0, 'tc');
      this.insertBitmap('instructions', 'inst', 20, 100);
      this.insertBitmap('scoreComputer', 'scoreComputer', 19, 463);
      this.insertBitmap('scoreYou', 'scoreYou', 19, 370);
      this.insertBitmap('repeatbtn', 'repeatbtn', 395, 536);
      this.addToMain(new Score('score', this.preload.getResult('c1'), this.preload.getResult('c2'), 20, 500, 5, 0));
      return this.setCardsYou().setCardsPc().introEvaluation();
    };

    U4A1.prototype.setCardsYou = function() {
      var animal, borde, cartas, h, i, texto, _i, _j;
      cartas = new createjs.Container();
      cartas.x = 100;
      cartas.y = 145;
      cartas.name = 'cartas';
      texto = new createjs.Text('You', '22px Arial', '#333');
      texto.x = 150;
      texto.y = -25;
      cartas.addChild(texto);
      for (h = _i = 0; _i <= 2; h = ++_i) {
        for (i = _j = 0; _j <= 2; i = ++_j) {
          borde = this.createSprite('borde', ['borde1', 'borde2', 'borde3'], null, i * 112, h * 130, 'tl');
          cartas.addChild(borde);
          this.addToLibrary(borde);
          animal = this.createBitmap(this.animals[i].id, this.animals[i].id, i * 112, h * 130);
          animal.scaleX = animal.scaleY = 0.36333;
          cartas.addChild(animal);
          this.addToLibrary(animal);
        }
      }
      this.addToMain(cartas);
      return this;
    };

    U4A1.prototype.setCardsPc = function() {
      var animal, borde, cartaspc, h, i, texto, _i, _j;
      cartaspc = new createjs.Container();
      cartaspc.x = 449;
      cartaspc.y = 145;
      cartaspc.name = 'cartaspc';
      texto = new createjs.Text('Computer', '22px Arial', '#333');
      texto.x = 117;
      texto.y = -25;
      cartaspc.addChild(texto);
      for (h = _i = 0; _i <= 2; h = ++_i) {
        for (i = _j = 0; _j <= 2; i = ++_j) {
          borde = this.createSprite('borde', ['borde1', 'borde2', 'borde3'], null, i * 112, h * 130, 'tl');
          cartaspc.addChild(borde);
          this.addToLibrary(borde);
          animal = this.createBitmap(this.animals[i].id, this.animals[i].id, i * 112, h * 130);
          animal.scaleX = animal.scaleY = 0.36333;
          cartaspc.addChild(animal);
          this.addToLibrary(animal);
        }
      }
      this.addToMain(cartaspc);
      return this;
    };

    U4A1.prototype.introEvaluation = function() {
      return U4A1.__super__.introEvaluation.apply(this, arguments);
      /*
      		for i in [1..6] by 1
      			@observer.subscribe 'init_evaluation', @library['name'+i].onInitEvaluation
      
      		@library['characters'].currentFrame = @answers[@index].id
      
      		TweenLite.from @library['header'], 1, {y:-@library['header'].height}
      		TweenLite.from @library['instructions'], 1, {alpha :0, x: 0, delay: 0.5}
      		TweenLite.from @library['names'], 1, {alpha: 0, y: @library['names'].y + 50, delay: 1}
      		TweenLite.from @library['dropname'], 1, {alpha: 0, y: @library['dropname'].y + 50, delay: 1}
      		TweenLite.from @library['characters'], 1, {alpha: 0, y: @library['characters'].y + 20, delay: 1.5, onComplete: @playInstructions, onCompleteParams: [@]}
      */

    };

    U4A1.prototype.initEvaluation = function(e) {
      U4A1.__super__.initEvaluation.apply(this, arguments);
      this.library['characters'].currentFrame = this.answers[this.index].id;
      createjs.Sound.play(this.answers[this.index].sound);
      return TweenLite.to(this.library['characters'], 0.5, {
        alpha: 1,
        y: stageSize.h - 180,
        ease: Quart.easeOut
      });
    };

    U4A1.prototype.evaluateAnswer = function(e) {
      var pt;
      this.answer = e.target;
      pt = this.library['dropname'].globalToLocal(this.stage.mouseX, this.stage.mouseY);
      if (this.library['dropname'].hitTest(pt.x, pt.y)) {
        if (this.answer.index === this.answers[this.index].id) {
          this.answer.blink(false);
          return setTimeout(this.finishEvaluation, 1 * 1000);
        } else {
          this.warning();
          return this.answer.returnToPlace();
        }
      } else {
        return this.answer.returnToPlace();
      }
    };

    U4A1.prototype.finishEvaluation = function() {
      TweenLite.to(this.library['characters'], 0.5, {
        alpha: 0,
        y: -200,
        ease: Back.easeOut,
        onComplete: this.nextEvaluation
      });
      return this.answer.returnToPlace();
    };

    U4A1.prototype.nextEvaluation = function() {
      this.index++;
      if (this.index < this.answers.length) {
        this.library['score'].updateCount(this.index);
        this.library['characters'].alpha = 1;
        this.library['characters'].y = stageSize.h - 180;
        this.library['characters'].currentFrame = this.answers[this.index].id;
        createjs.Sound.play(this.answers[this.index].sound);
        return TweenLite.from(this.library['characters'], 0.5, {
          alpha: 0,
          y: this.library['characters'].y + 20,
          ease: Quart.easeOut
        });
      } else {
        return this.finish();
      }
    };

    U4A1.prototype.repeatSound = function() {
      return createjs.Sound.play(this.answers[this.index].sound);
    };

    U4A1.prototype.finish = function() {
      var i, _i, _results;
      U4A1.__super__.finish.apply(this, arguments);
      _results = [];
      for (i = _i = 1; _i <= 6; i = _i += 1) {
        _results.push(this.library['name' + i].blink(false));
      }
      return _results;
    };

    window.U4A1 = U4A1;

    return U4A1;

  })(Oda);

}).call(this);
