// Generated by CoffeeScript 1.6.3
(function() {
  var U4A4,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  U4A4 = (function(_super) {
    __extends(U4A4, _super);

    function U4A4() {
      this.repeatSound = __bind(this.repeatSound, this);
      this.nextEvaluation = __bind(this.nextEvaluation, this);
      this.finishEvaluation = __bind(this.finishEvaluation, this);
      this.evaluateAnswer = __bind(this.evaluateAnswer, this);
      this.initEvaluation = __bind(this.initEvaluation, this);
      var manifest, sounds;
      manifest = [
        {
          id: 'head',
          src: 'pleca.png'
        }, {
          id: 'inst',
          src: 'texto_look.png'
        }, {
          id: 'c1',
          src: 'circle1.png'
        }, {
          id: 'c2',
          src: 'circle2.png'
        }, {
          id: 'repeatbtn',
          src: 'repeat-btn.png'
        }, {
          id: 'playagain',
          src: 'play_again.png'
        }, {
          id: 'startgame',
          src: 'start_game.png'
        }, {
          id: 'btnfalse',
          src: 'btn_false.png'
        }, {
          id: 'btntrue',
          src: 'btn_true.png'
        }, {
          id: 'framedesert',
          src: 'frame_desert.png'
        }, {
          id: 'framegrasslands',
          src: 'frame_grasslands.png'
        }, {
          id: 'framejungle',
          src: 'frame_jungle.png'
        }, {
          id: 'frameocean',
          src: 'frame_ocean.png'
        }, {
          id: 'incamel',
          src: 'in_camel.png'
        }, {
          id: 'incrocodile',
          src: 'in_crocodile.png'
        }, {
          id: 'indolphin',
          src: 'in_dolphin.png'
        }, {
          id: 'inelephant',
          src: 'in_elephant.png'
        }, {
          id: 'ingiraffe',
          src: 'in_giraffe.png'
        }, {
          id: 'injaguar',
          src: 'in_jaguar.png'
        }, {
          id: 'inlion',
          src: 'in_lion.png'
        }, {
          id: 'inlizard',
          src: 'in_lizard.png'
        }, {
          id: 'inmonkey',
          src: 'in_monkey.png'
        }, {
          id: 'inoctopus',
          src: 'in_octopus.png'
        }, {
          id: 'inparrot',
          src: 'in_parrot.png'
        }, {
          id: 'inscorpion',
          src: 'in_scorpion.png'
        }, {
          id: 'inshark',
          src: 'in_shark.png'
        }, {
          id: 'insnake',
          src: 'in_snake.png'
        }, {
          id: 'inwhale',
          src: 'in_whale.png'
        }, {
          id: 'inzebra',
          src: 'in_zebra.png'
        }, {
          id: 'outcamel',
          src: 'out_camel.png'
        }, {
          id: 'outcrocodile',
          src: 'out_crocodile.png'
        }, {
          id: 'outdolphin',
          src: 'out_dolphin.png'
        }, {
          id: 'outelephant',
          src: 'out_elephant.png'
        }, {
          id: 'outgiraffe',
          src: 'out_giraffe.png'
        }, {
          id: 'outjaguar',
          src: 'out_jaguar.png'
        }, {
          id: 'outlion',
          src: 'out_lion.png'
        }, {
          id: 'outlizard',
          src: 'out_lizard.png'
        }, {
          id: 'outmonkey',
          src: 'out_monkey.png'
        }, {
          id: 'outoctopus',
          src: 'out_octopus.png'
        }, {
          id: 'outparrot',
          src: 'out_parrot.png'
        }, {
          id: 'outscorpion',
          src: 'out_scorpion.png'
        }, {
          id: 'outshark',
          src: 'out_shark.png'
        }, {
          id: 'outsnake',
          src: 'out_snake.png'
        }, {
          id: 'outwhale',
          src: 'out_whale.png'
        }, {
          id: 'outzebra',
          src: 'out_zebra.png'
        }
      ];
      sounds = [
        {
          src: 'sounds/boing.mp3',
          id: 'boing'
        }, {
          src: 'sounds/TU2_U4_A3_instructions.mp3',
          id: 'instructions'
        }
      ];
      this.answers = [];
      U4A4.__super__.constructor.call(this, null, manifest, sounds);
    }

    U4A4.prototype.setStage = function() {
      U4A4.__super__.setStage.apply(this, arguments);
      this.insertBitmap('header', 'head', stageSize.w / 2, 0, 'tc');
      this.insertBitmap('instructions', 'inst', 20, 100);
      this.addToMain(new Score('score', this.preload.getResult('c1'), this.preload.getResult('c2'), 20, 500, 5, 0));
      return this.setAnimals().introEvaluation();
    };

    U4A4.prototype.setAnimals = function() {
      this.insertBitmap('btnfalse', 'btnfalse', 536, 535);
      this.insertBitmap('btntrue', 'btntrue', 409, 536);
      this.insertBitmap('framedesert', 'framedesert', 447, 309);
      this.insertBitmap('framegrasslands', 'framegrasslands', 447, 131);
      this.insertBitmap('framejungle', 'framejungle', 174, 309);
      this.insertBitmap('frameocean', 'frameocean', 168, 131);
      this.insertBitmap('incamel', 'incamel', 446, 365);
      this.insertBitmap('incrocodile', 'incrocodile', 282, 419);
      this.insertBitmap('indolphin', 'indolphin', 168, 217);
      this.insertBitmap('inelephant', 'inelephant', 605, 180);
      this.insertBitmap('ingiraffe', 'ingiraffe', 452, 138);
      this.insertBitmap('injaguar', 'injaguar', 160, 376);
      this.insertBitmap('inlion', 'inlion', 540, 148);
      this.insertBitmap('inlizard', 'inlizard', 561, 343);
      this.insertBitmap('inmonkey', 'inmonkey', 305, 314);
      this.insertBitmap('inoctopus', 'inoctopus', 174, 140);
      this.insertBitmap('inparrot', 'inparrot', 173, 326);
      this.insertBitmap('inscorpion', 'inscorpion', 555, 410);
      this.insertBitmap('inshark', 'inshark', 292, 140);
      this.insertBitmap('insnake', 'insnake', 601, 366);
      this.insertBitmap('inwhale', 'inwhale', 240, 219);
      this.insertBitmap('inzebra', 'inzebra', 513, 198);
      this.insertSprite('animalesfuera', ['outcamel', 'outcrocodile', 'outdolphin', 'outelephant', 'outgiraffe', 'outjaguar', 'outlion', 'outlizard', 'outmonkey', 'outoctopus', 'outparrot', 'outscorpion', 'outshark', 'outsnake', 'outwhale', 'outzebra'], null, 243, 535, 'mc');
      return this;
    };

    U4A4.prototype.introEvaluation = function() {
      return U4A4.__super__.introEvaluation.apply(this, arguments);
      /*
      		for i in [1..6] by 1
      			@observer.subscribe 'init_evaluation', @library['name'+i].onInitEvaluation
      
      		@library['characters'].currentFrame = @answers[@index].id
      
      		TweenLite.from @library['header'], 1, {y:-@library['header'].height}
      		TweenLite.from @library['instructions'], 1, {alpha :0, x: 0, delay: 0.5}
      		TweenLite.from @library['names'], 1, {alpha: 0, y: @library['names'].y + 50, delay: 1}
      		TweenLite.from @library['dropname'], 1, {alpha: 0, y: @library['dropname'].y + 50, delay: 1}
      		TweenLite.from @library['characters'], 1, {alpha: 0, y: @library['characters'].y + 20, delay: 1.5, onComplete: @playInstructions, onCompleteParams: [@]}
      */

    };

    U4A4.prototype.initEvaluation = function(e) {
      U4A4.__super__.initEvaluation.apply(this, arguments);
      this.library['characters'].currentFrame = this.answers[this.index].id;
      createjs.Sound.play(this.answers[this.index].sound);
      return TweenLite.to(this.library['characters'], 0.5, {
        alpha: 1,
        y: stageSize.h - 180,
        ease: Quart.easeOut
      });
    };

    U4A4.prototype.evaluateAnswer = function(e) {
      var pt;
      this.answer = e.target;
      pt = this.library['dropname'].globalToLocal(this.stage.mouseX, this.stage.mouseY);
      if (this.library['dropname'].hitTest(pt.x, pt.y)) {
        if (this.answer.index === this.answers[this.index].id) {
          this.answer.blink(false);
          return setTimeout(this.finishEvaluation, 1 * 1000);
        } else {
          this.warning();
          return this.answer.returnToPlace();
        }
      } else {
        return this.answer.returnToPlace();
      }
    };

    U4A4.prototype.finishEvaluation = function() {
      TweenLite.to(this.library['characters'], 0.5, {
        alpha: 0,
        y: -200,
        ease: Back.easeOut,
        onComplete: this.nextEvaluation
      });
      return this.answer.returnToPlace();
    };

    U4A4.prototype.nextEvaluation = function() {
      this.index++;
      if (this.index < this.answers.length) {
        this.library['score'].updateCount(this.index);
        this.library['characters'].alpha = 1;
        this.library['characters'].y = stageSize.h - 180;
        this.library['characters'].currentFrame = this.answers[this.index].id;
        createjs.Sound.play(this.answers[this.index].sound);
        return TweenLite.from(this.library['characters'], 0.5, {
          alpha: 0,
          y: this.library['characters'].y + 20,
          ease: Quart.easeOut
        });
      } else {
        return this.finish();
      }
    };

    U4A4.prototype.repeatSound = function() {
      return createjs.Sound.play(this.answers[this.index].sound);
    };

    U4A4.prototype.finish = function() {
      var i, _i, _results;
      U4A4.__super__.finish.apply(this, arguments);
      _results = [];
      for (i = _i = 1; _i <= 6; i = _i += 1) {
        _results.push(this.library['name' + i].blink(false));
      }
      return _results;
    };

    window.U4A4 = U4A4;

    return U4A4;

  })(Oda);

}).call(this);
