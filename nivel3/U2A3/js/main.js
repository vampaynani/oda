// Generated by CoffeeScript 1.6.3
/*

LIBRARY
*/


(function() {
  var Actions, Behaviors, Component, Game, GameObserver, Instructions, MainContainer, Mobile, Observer, Oda, Preloader, Scene, SceneObserver, SceneStack, U2A3, _base, _base1, _base2, _base3, _base4, _ref, _ref1,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.dealersjs == null) {
    window.dealersjs = {};
  }

  if (window.d2oda == null) {
    window.d2oda = {};
  }

  if (window.lib == null) {
    window.lib = {};
  }

  if ((_base = window.dealersjs).mixOf == null) {
    _base.mixOf = function() {
      var Mixed, base, method, mixin, mixins, name, _i, _ref, _ref1;
      base = arguments[0], mixins = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      Mixed = (function(_super) {
        __extends(Mixed, _super);

        function Mixed() {
          _ref = Mixed.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        return Mixed;

      })(base);
      for (_i = mixins.length - 1; _i >= 0; _i += -1) {
        mixin = mixins[_i];
        console.log("mixin::" + mixin);
        _ref1 = mixin.prototype;
        for (name in _ref1) {
          method = _ref1[name];
          console.log("name,method::" + name + "," + method);
          Mixed.prototype[name] = method;
        }
      }
      return Mixed;
    };
  }

  if ((_base1 = window.dealersjs).mobile == null) {
    _base1.mobile = Mobile = (function() {
      function Mobile() {}

      Mobile.user_agent = navigator.userAgent.toLowerCase()({
        isIOS: function() {
          if (this === this.isIpad() || this === this.isIphone() || this === this.isIpod()) {
            return true;
          } else {
            return false;
          }
        },
        isIpad: function() {
          return this.user_agent.indexOf('ipad') > -1;
        },
        isIphone: function() {
          return this.user_agent.indexOf('iphone') > -1;
        },
        isIpod: function() {
          return this.user_agent.indexOf('ipod') > -1;
        },
        isAndroid: function() {
          return this.user_agent.indexOf('android') > -1;
        },
        isMobile: function() {
          return this.user_agent.indexOf('mobile') > -1;
        }
      }, Mobile);

      return Mobile;

    })();
  }

  if ((_base2 = window.d2oda).behaviors == null) {
    _base2.behaviors = Behaviors = (function() {
      function Behaviors() {
        this.endDragListener = __bind(this.endDragListener, this);
        this.initDragListener = __bind(this.initDragListener, this);
      }

      Behaviors.prototype.initDragListener = function() {
        return this.addEventListener('mousedown', this.handleMouseDown);
      };

      Behaviors.prototype.endDragListener = function() {
        return this.removeEventListener('mousedown', this.handleMouseDown);
      };

      Behaviors;

      return Behaviors;

    })();
  }

  if ((_base3 = window.d2oda).actions == null) {
    _base3.actions = Actions = (function() {
      function Actions() {}

      Actions.prototype.fadeOut = function() {
        if (this.alpha === 1) {
          return TweenLite.to(this, 0.5, {
            alpha: 0,
            y: this.y - 20
          });
        } else {
          return TweenLite.from(this, 0.5, {
            alpha: 1,
            y: this.y + 20
          });
        }
      };

      Actions.prototype.fadeIn = function() {
        if (this.alpha === 0) {
          return TweenLite.to(this, 0.5, {
            alpha: 1,
            y: this.y - 20
          });
        } else {
          return TweenLite.from(this, 0.5, {
            alpha: 0,
            y: this.y + 20
          });
        }
      };

      Actions.prototype.blink = function(state) {
        if (state == null) {
          state = true;
        }
        TweenMax.killTweensOf(this);
        this.alpha = 1;
        if (state) {
          return TweenMax.to(this, 0.5, {
            alpha: 0.2,
            repeat: -1,
            yoyo: true
          });
        }
      };

      Actions.prototype.putInPlace = function(position, alpha, scaleX, scaleY) {
        if (alpha == null) {
          alpha = 1;
        }
        if (scaleX == null) {
          scaleX = 1;
        }
        if (scaleY == null) {
          scaleY = 1;
        }
        this.inPlace = true;
        return TweenLite.to(this, 1, {
          ease: Back.easeOut,
          delay: 0.1,
          x: position.x,
          y: position.y,
          alpha: alpha,
          scaleX: scaleX,
          scaleY: scaleY
        });
      };

      Actions.prototype.returnToPlace = function(alpha, scaleX, scaleY) {
        if (alpha == null) {
          alpha = 1;
        }
        if (scaleX == null) {
          scaleX = 1;
        }
        if (scaleY == null) {
          scaleY = 1;
        }
        return TweenLite.to(this, 0.5, {
          ease: Back.easeOut,
          delay: 0.1,
          x: this.pos.x,
          y: this.pos.y,
          alpha: alpha,
          scaleX: scaleX,
          scaleY: scaleY
        });
      };

      Actions;

      return Actions;

    })();
  }

  if ((_base4 = window.d2oda).stage == null) {
    _base4.stage = {
      w: 800,
      h: 600,
      r: 1
    };
  }

  /*
  
  BASE CLASSES
  */


  Oda = (function() {
    function Oda() {
      this.resetGame = __bind(this.resetGame, this);
      this.endGame = __bind(this.endGame, this);
      this.initGame = __bind(this.initGame, this);
      this.removeMobileInstructions = __bind(this.removeMobileInstructions, this);
      this.initMobileInstructions = __bind(this.initMobileInstructions, this);
      this.playInstructions = __bind(this.playInstructions, this);
      this.setGame = __bind(this.setGame, this);
      var assetsurl, def_manifest, item;
      lib.preloader = new Preloader();
      lib.mainContainer = new MainContainer();
      assetsurl = 'assets/';
      def_manifest = [
        {
          id: 'sg',
          src: "" + assetsurl + "start_game.png"
        }, {
          id: 'pa',
          src: "" + assetsurl + "play_again.png"
        }, {
          id: 's/boing',
          src: "" + assetsurl + "boing.mp3"
        }, {
          id: 's/good',
          src: "" + assetsurl + "good.mp3"
        }, {
          id: 's/wrong',
          src: "" + assetsurl + "wrong.mp3"
        }
      ];
      this.manifest = (function() {
        var _i, _len, _ref, _results;
        _ref = this.manifest;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push({
            id: "" + item.id,
            src: "" + (assetsurl + item.src)
          });
        }
        return _results;
      }).call(this);
      Array.prototype.push.apply(this.manifest, def_manifest);
      this._setStage().resize();
      lib.preloader.addEventListener('complete', this.setGame);
      lib.preloader.load(this.manifest);
    }

    Oda.prototype.resize = function() {
      var h, w;
      w = window.innerWidth;
      h = window.innerHeight;
      d2oda.stage.r = Math.min(w / d2oda.stage.w, h / d2oda.stage.h);
      lib.mainContainer.scaleX = d2oda.stage.r;
      lib.mainContainer.scaleY = d2oda.stage.r;
      $('#oda').width(w);
      this.stage.canvas.width = w;
      this.stage.canvas.height = h;
      lib.mainContainer.x = this.stage.canvas.width / 2;
      lib.mainContainer.y = this.stage.canvas.height / 2;
      return this;
    };

    Oda.prototype.setGame = function() {
      lib.game = new Game(this.game);
      return this.playInstructions();
    };

    Oda.prototype.playInstructions = function() {
      var inst;
      if (dealersjs.mobile.isIOS() || dealersjs.mobile.isAndroid()) {
        lib.mainContainer.insertBitmap('start', 'sg', d2oda.stage.w / 2, d2oda.stage.h / 2, 'mc');
        lib.start.addEventListener('click', this.initMobileInstructions);
        return TweenLite.from(lib.start, 0.3, {
          alpha: 0,
          y: lib.start + 20
        });
      } else {
        inst = lib.instructions.playSound('s/instructions');
        return inst.addEventListener('complete', this.initGame);
      }
    };

    Oda.prototype.initMobileInstructions = function(e) {
      var inst;
      createjs.Sound.stop();
      inst = lib.instructions.playSound('s/instructions');
      e.target.removeEventListener('click', this.initMobileInstructions);
      inst.addEventListener('complete', this.initGame);
      return TweenLite.to(lib.start, 0.3, {
        alpha: 0,
        y: lib.start.y + 20,
        onComplete: this.removeMobileInstructions
      });
    };

    Oda.prototype.removeMobileInstructions = function() {
      return lib.mainContainer.removeChild(lib.start);
    };

    Oda.prototype.initGame = function() {
      return lib.game.start();
    };

    Oda.prototype.endGame = function() {
      return lib.game.end();
    };

    Oda.prototype.resetGame = function() {
      return lib.game.reset();
    };

    Oda.prototype.tick = function() {
      return this.stage.update();
    };

    Oda.prototype._setStage = function() {
      this.stage = new createjs.Stage('oda');
      createjs.Ticker.addListener(this);
      createjs.Ticker.setFPS(60);
      createjs.Touch.enable(this.stage);
      this.stage.enableMouseOver();
      this.stage.addChild(lib.mainContainer);
      lib.preloader.mainContainer = lib.mainContainer;
      return this;
    };

    window.Oda = Oda;

    return Oda;

  })();

  Preloader = (function() {
    function Preloader() {
      this.handleComplete = __bind(this.handleComplete, this);
      this.handleProgress = __bind(this.handleProgress, this);
      this.initialize();
    }

    Preloader.prototype = new createjs.EventDispatcher();

    Preloader.prototype.EventDispatcher_initialize = Preloader.prototype.initialize;

    Preloader.prototype.initialize = function() {
      var bgBar, i, _i, _ref, _results;
      this.EventDispatcher_initialize();
      this.preload = new createjs.LoadQueue(false);
      this.loadStep = 0;
      this.barHeight = 7;
      this.barWidth = 35;
      this.loaderColor = (_ref = $('#oda').data('loadercolor')) != null ? _ref : '#E62922';
      this.loaderBar = new createjs.Container();
      this.loaderBar.x = d2oda.stage.w / 2;
      this.loaderBar.y = d2oda.stage.h / 2;
      _results = [];
      for (i = _i = 1; _i <= 13; i = _i += 1) {
        bgBar = new createjs.Shape();
        bgBar.graphics.setStrokeStyle(1).beginStroke(this.loaderColor).beginFill(this.loaderColor).drawRoundRect(0, 0, this.barWidth, this.barHeight, 5);
        bgBar.regX = -20;
        bgBar.regY = this.barHeight / 2;
        bgBar.rotation = (i - 1) * 30;
        bgBar.alpha = 0.05;
        bgBar.name = 'bar' + i.toString();
        _results.push(this.loaderBar.addChild(bgBar));
      }
      return _results;
    };

    Preloader.prototype.load = function(manifest) {
      this.preload.installPlugin(createjs.Sound);
      this.preload.addEventListener('progress', this.handleProgress);
      this.preload.addEventListener('complete', this.handleComplete);
      this.preload.loadManifest(manifest);
      this.mainContainer.addChild(this.loaderBar);
      TweenLite.from(this.loaderBar, 1, {
        alpha: 0.1,
        ease: Quart.easeOut
      });
      return this;
    };

    Preloader.prototype.handleProgress = function(e) {
      var percent;
      percent = Math.round(this.preload.progress * 100);
      if (e.loaded >= this.loadStep / 12 && this.loadStep < 12) {
        this.showBar("bar" + (this.loadStep + 1));
        return this.loadStep++;
      }
    };

    Preloader.prototype.handleComplete = function() {
      this.preload.removeEventListener('progress', this.handleProgress);
      this.preload.removeEventListener('complete', this.handleComplete);
      this.dispatchEvent({
        type: 'complete'
      });
      return TweenLite.to(this.loaderBar, 1, {
        alpha: 0,
        ease: Quart.easeOut
      });
    };

    Preloader.prototype.showBar = function(name) {
      return TweenLite.to(this.loaderBar.getChildByName(name), 2.5, {
        alpha: 1,
        ease: Quart.easeOut
      });
    };

    window.Preloader = Preloader;

    return Preloader;

  })();

  MainContainer = (function() {
    function MainContainer() {
      this.initialize();
    }

    MainContainer.prototype = new createjs.Container();

    MainContainer.prototype.Container_initialize = MainContainer.prototype.initialize;

    MainContainer.prototype.initialize = function() {
      this.Container_initialize();
      this.name = 'mainContainer';
      this.regX = d2oda.stage.w / 2;
      return this.regY = d2oda.stage.h / 2;
    };

    MainContainer.prototype.createBitmap = function(name, id, x, y, position) {
      var bmp, img;
      if (position == null) {
        position = 'tl';
      }
      img = lib.preloader.preload.getResult(id);
      bmp = new createjs.Bitmap(img);
      bmp.x = x;
      bmp.y = y;
      bmp.width = img.width;
      bmp.height = img.height;
      bmp.name = name;
      switch (position) {
        case 'tc':
          this.setReg(bmp, img.width / 2, 0);
          break;
        case 'tr':
          this.setReg(bmp, img.width, 0);
          break;
        case 'ml':
          this.setReg(bmp, 0, img.height / 2);
          break;
        case 'mc':
          this.setReg(bmp, img.width / 2, img.height / 2);
          break;
        case 'mr':
          this.setReg(bmp, img.width, img.height / 2);
          break;
        case 'bl':
          this.setReg(bmp, 0, img.height);
          break;
        case 'bc':
          this.setReg(bmp, img.width / 2, img.height);
          break;
        case 'br':
          this.setReg(bmp, img.width, img.height);
          break;
        default:
          this.setReg(bmp, 0, 0);
      }
      return bmp;
    };

    MainContainer.prototype.insertBitmap = function(name, id, x, y, position) {
      var bmp;
      if (position == null) {
        position = 'tl';
      }
      bmp = this.createBitmap(name, id, x, y, position);
      this.add(bmp);
      return bmp;
    };

    MainContainer.prototype.createText = function(name, t, f, c, x, y, align) {
      var text;
      if (align == null) {
        align = 'left';
      }
      text = new createjs.Text(t, f, c);
      text.name = name;
      text.x = x;
      text.y = y;
      text.textAlign = align;
      return text;
    };

    MainContainer.prototype.insertText = function(name, t, f, c, x, y, align) {
      var text;
      if (align == null) {
        align = 'left';
      }
      text = this.createText(name, t, f, c, x, y, align);
      this.add(text);
      return text;
    };

    MainContainer.prototype.createSprite = function(name, imgs, anim, x, y, position) {
      var animation, h, img, sprite, spriteImgs, w;
      if (anim == null) {
        anim = null;
      }
      if (position == null) {
        position = 'tl';
      }
      spriteImgs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = imgs.length; _i < _len; _i++) {
          img = imgs[_i];
          _results.push(lib.preloader.preload.getResult(img));
        }
        return _results;
      })();
      w = spriteImgs[0].width;
      h = spriteImgs[0].height;
      sprite = new createjs.SpriteSheet({
        images: spriteImgs,
        animations: anim,
        frames: {
          width: w,
          height: h
        }
      });
      animation = new createjs.BitmapAnimation(sprite);
      animation.x = x;
      animation.y = y;
      animation.width = w;
      animation.height = h;
      animation.name = name;
      animation.currentFrame = 0;
      switch (position) {
        case 'tc':
          this.setReg(animation, animation.width / 2, 0);
          break;
        case 'tr':
          this.setReg(animation, animation.width, 0);
          break;
        case 'ml':
          this.setReg(animation, 0, animation.height / 2);
          break;
        case 'mc':
          this.setReg(animation, animation.width / 2, animation.height / 2);
          break;
        case 'mr':
          this.setReg(animation, animation.width, animation.height / 2);
          break;
        case 'bl':
          this.setReg(animation, 0, animation.height);
          break;
        case 'bc':
          this.setReg(animation, animation.width / 2, animation.height);
          break;
        case 'br':
          this.setReg(animation, animation.width, animation.height);
          break;
        default:
          this.setReg(animation, 0, 0);
      }
      return animation;
    };

    MainContainer.prototype.insertSprite = function(name, imgs, anim, x, y, position) {
      var animation;
      if (anim == null) {
        anim = null;
      }
      if (position == null) {
        position = 'tl';
      }
      animation = this.createSprite(name, imgs, anim, x, y, position);
      this.add(animation);
      return animation;
    };

    MainContainer.prototype.setReg = function(obj, regX, regY) {
      obj.regX = regX;
      obj.regY = regY;
      return obj;
    };

    MainContainer.prototype.add = function(child, toLibrary) {
      if (toLibrary == null) {
        toLibrary = true;
      }
      this.addChild(child);
      if (toLibrary) {
        return lib[child.name] = child;
      }
    };

    window.MainContainer = MainContainer;

    return MainContainer;

  })();

  Observer = (function() {
    function Observer() {
      this.subscribers = [];
    }

    Observer.prototype.notify = function(item) {
      var subscriber, _i, _len, _ref, _results;
      _ref = this.subscribers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subscriber = _ref[_i];
        if (subscriber.item === item) {
          _results.push(subscriber.callback(item));
        }
      }
      return _results;
    };

    Observer.prototype.subscribe = function(to, onNotify) {
      return this.subscribers.push({
        'item': to,
        'callback': onNotify
      });
    };

    return Observer;

  })();

  GameObserver = (function(_super) {
    __extends(GameObserver, _super);

    function GameObserver() {
      _ref = GameObserver.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GameObserver.NEXT_SCENE = 'next_scene';

    GameObserver.PREV_SCENE = 'prev_scene';

    window.GameObserver = GameObserver;

    return GameObserver;

  })(Observer);

  Game = (function() {
    function Game(game) {
      this.initialize(game);
    }

    Game.prototype = new createjs.EventDispatcher();

    Game.prototype.EventDispatcher_initialize = Game.prototype.initialize;

    Game.prototype.initialize = function(game) {
      this.observer = new GameObserver();
      return this.setHeader(game.header).setInstructions(game.instructions).setScenes(game.scenes);
    };

    Game.prototype.setHeader = function(header) {
      lib.mainContainer.insertBitmap('header', header, d2oda.stage.w / 2, 0, 'tc');
      TweenLite.from(lib.header, 0.5, {
        alpha: 0,
        y: lib.header.y - 20
      });
      return this;
    };

    Game.prototype.setInstructions = function(instructions) {
      lib.instructions = new Instructions(instructions);
      lib.mainContainer.add(lib.instructions, false);
      if (instructions.steps.length > 1) {
        this.observer.subscribe(GameObserver.NEXT_SCENE, lib.instructions.next);
        this.observer.subscribe(GameObserver.PREV_SCENE, lib.instructions.prev);
      }
      return this;
    };

    Game.prototype.setScenes = function(scenes) {
      lib.scenes = new SceneStack(scenes);
      return this;
    };

    Game.prototype.start = function() {};

    Game.prototype.nextScene = function() {
      return this.observer.notify(GameObserver.NEXT_SCENE);
    };

    Game.prototype.prevScene = function() {
      return this.observer.notify(GameObserver.PREV_SCENE);
    };

    window.Game = Game;

    return Game;

  })();

  /*
  
  COMPONENTS CLASSES
  */


  Component = (function() {
    function Component() {}

    Component.prototype = new createjs.Container();

    Component.prototype.Container_initialize = Component.prototype.initialize;

    Component.prototype.initialize = function() {
      return this.Container_initialize();
    };

    Component.prototype.next = function() {};

    Component.prototype.prev = function() {};

    return Component;

  })();

  Instructions = (function(_super) {
    __extends(Instructions, _super);

    function Instructions(instructions) {
      this.prev = __bind(this.prev, this);
      this.next = __bind(this.next, this);
      this.initialize(instructions);
    }

    Instructions.prototype.initialize = function(instructions) {
      var triangle;
      this.x = instructions.x;
      this.y = instructions.y;
      this.steps = instructions.steps;
      this.currentStep = 0;
      triangle = new createjs.Shape();
      triangle.graphics.beginFill('#bcd748').moveTo(0, 0).lineTo(8, 5).lineTo(0, 10);
      triangle.y = 5;
      this.label = new createjs.Text(this.steps[this.currentStep].text, '16px Roboto', '#000');
      this.label.x = 14;
      this.addChild(triangle, this.label);
      return TweenLite.from(this, 0.5, {
        alpha: 0,
        x: this.x - 20
      });
    };

    Instructions.prototype.playSound = function() {
      if (!this.steps[this.currentStep].played) {
        this.steps[this.currentStep].played = true;
        return createjs.Sound.play(this.steps[this.currentStep].sound);
      }
    };

    Instructions.prototype.next = function() {
      this.currentStep++;
      if (this.steps.length > 1 && this.currentStep < this.steps.length) {
        this.playSound();
        this.label.text = this.steps[this.currentStep].text;
        return TweenLite.from(this, 0.5, {
          alpha: 0,
          x: this.x - 20
        });
      } else {
        return this.currentStep--;
      }
    };

    Instructions.prototype.prev = function() {
      this.currentStep--;
      if (this.currentStep >= 0) {
        this.label.text = this.steps[this.currentStep].text;
        return TweenLite.from(this, 0.5, {
          alpha: 0,
          x: this.x - 20
        });
      } else {
        return this.currentStep++;
      }
    };

    window.Instructions = Instructions;

    return Instructions;

  })(Component);

  SceneStack = (function(_super) {
    __extends(SceneStack, _super);

    function SceneStack(scenes) {
      this.initialize(scenes);
    }

    SceneStack.prototype.initialize = function(scenes) {
      var sc;
      this.stack = [];
      this.currentScene = 0;
      return sc = new Scene();
    };

    /*
    	next: =>
    		@currentScene++
    		if @stack.length > 1 and @currentScene < @stack.length
    			@stack[@currentScene - 1].visible = false
    			@stack[@currentScene].visible = true
    			TweenLite.from @, 1, {alpha: 0}
    		else
    			@currentScene--
    	prev: =>
    		@currentScene--
    		if @currentScene >= 0
    			@stack[@currentScene + 1].visible = false
    			@stack[@currentScene].visible = true
    			TweenLite.from @, 1, {alpha: 0}
    		else
    			@currentScene++
    */


    window.SceneStack = SceneStack;

    return SceneStack;

  })(Component);

  SceneObserver = (function(_super) {
    __extends(SceneObserver, _super);

    function SceneObserver() {
      _ref1 = SceneObserver.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    SceneObserver.NEXT_STEP = 'next_step';

    SceneObserver.PREV_STEP = 'prev_step';

    window.SceneObserver = SceneObserver;

    return SceneObserver;

  })(Observer);

  Scene = (function(_super) {
    __extends(Scene, _super);

    function Scene(scene) {
      if (scene == null) {
        scene = null;
      }
      this.initialize(scene);
    }

    Scene.prototype.initialize = function(scene) {
      if (scene == null) {
        scene = null;
      }
      this.observer = new SceneObserver();
      return console.log('initialize');
    };

    Scene.prototype.nexStep = function() {
      return this.observer.notify(SceneObserver.NEXT_STEP);
    };

    Scene.prototype.prevStep = function() {
      return this.observer.notify(SceneObserver.PREV_STEP);
    };

    return Scene;

  })(Component);

  /*
  
  NEW ODA
  */


  U2A3 = (function(_super) {
    __extends(U2A3, _super);

    function U2A3() {
      this.manifest = [
        {
          id: 'head',
          src: 'pleca1.png'
        }, {
          id: 'c1',
          src: 'circle1.png'
        }, {
          id: 'c2',
          src: 'circle2.png'
        }, {
          id: 'letraM',
          src: 'letra_M.png'
        }, {
          id: 'letraU',
          src: 'letra_U.png'
        }, {
          id: 'letraS',
          src: 'letra_S.png'
        }, {
          id: 'letraH',
          src: 'letra_H.png'
        }, {
          id: 'letraR',
          src: 'letra_R.png'
        }, {
          id: 'letraO',
          src: 'letra_O.png'
        }, {
          id: 'mush',
          src: 'mush.png'
        }, {
          id: 'priceblueberryJam',
          src: 'price_blueberryJam.png'
        }, {
          id: 'pricebutter',
          src: 'price_butter.png'
        }, {
          id: 'pricecarrots',
          src: 'price_carrots.png'
        }, {
          id: 'pricechilis',
          src: 'price_chilis.png'
        }, {
          id: 'pricecream',
          src: 'price_cream.png'
        }, {
          id: 'priceeggs',
          src: 'price_eggs.png'
        }, {
          id: 'pricemushrooms',
          src: 'price_mushrooms.png'
        }, {
          id: 'pricepeachJam',
          src: 'price_peachJam.png'
        }, {
          id: 'pricepeppers',
          src: 'price_peppers.png'
        }, {
          id: 'propabuelita',
          src: 'prop_abuelita.png'
        }, {
          id: 'propbg',
          src: 'prop_bg.png'
        }, {
          id: 'clue',
          src: 'text_clue.png'
        }, {
          id: 's/instructions',
          src: 'TU3_U2_A3_Instructions.mp3'
        }, {
          id: 's/instructions2',
          src: 'TU3_U2_A3_Instructions2.mp3'
        }
      ];
      this.game = {
        header: 'head',
        instructions: {
          x: 40,
          y: 100,
          steps: [
            {
              text: 'Instructions 1',
              sound: 's/instructions',
              played: false
            }, {
              text: 'Instructions 2',
              sound: 's/instructions2',
              played: false
            }
          ]
        },
        scenes: [
          {
            background: {
              name: 'propbg',
              x: 426,
              y: 308,
              align: 'mc'
            },
            components: {
              texts: [],
              images: [
                {
                  name: 'abuelita',
                  imgId: 'propabuelita',
                  x: 554,
                  y: 254,
                  align: 'mc'
                }, {
                  imgId: 'letraM',
                  x: 501,
                  y: 407,
                  align: 'mc'
                }, {
                  imgId: 'letraU',
                  x: 324,
                  y: 408,
                  align: 'mc'
                }, {
                  imgId: 'letraS',
                  x: 563,
                  y: 323,
                  align: 'mc'
                }, {
                  imgId: 'letraH',
                  x: 303,
                  y: 317,
                  align: 'mc'
                }, {
                  imgId: 'letraR',
                  x: 314,
                  y: 213,
                  align: 'mc'
                }, {
                  imgId: 'letraO',
                  x: 374,
                  y: 316,
                  align: 'mc'
                }, {
                  name: 'letraO2',
                  imgId: 'letraO',
                  x: 454,
                  y: 316,
                  align: 'mc'
                }, {
                  name: 'letraM2',
                  imgId: 'letraM',
                  x: 576,
                  y: 163,
                  align: 'mc'
                }, {
                  name: 'letraS2',
                  imgId: 'letraS',
                  x: 389,
                  y: 257,
                  align: 'mc'
                }
              ],
              containers: [
                {
                  type: 'label',
                  name: 'answerlbl',
                  text: '',
                  font: '15px Quicksand',
                  color: '#333',
                  x: 415,
                  y: 530,
                  align: 'center'
                }
              ],
              buttons: [
                {
                  imgId: 'priceblueberryJam',
                  x: 521,
                  y: 404,
                  align: 'mc',
                  index: 'blueberry',
                  action: 'checkPrice'
                }, {
                  imgId: 'pricebutter',
                  x: 350,
                  y: 218,
                  align: 'mc',
                  index: 'butter',
                  action: 'checkPrice'
                }, {
                  imgId: 'pricecarrots',
                  x: 584,
                  y: 314,
                  align: 'mc',
                  index: 'carrots',
                  action: 'checkPrice'
                }, {
                  imgId: 'pricechilis',
                  x: 580,
                  y: 176,
                  align: 'mc',
                  index: 'chilis',
                  action: 'checkPrice'
                }, {
                  imgId: 'pricecream',
                  x: 416,
                  y: 253,
                  align: 'mc',
                  index: 'cream',
                  action: 'checkPrice'
                }, {
                  imgId: 'priceeggs',
                  x: 322,
                  y: 315,
                  align: 'mc',
                  index: 'eggs',
                  action: 'checkPrice'
                }, {
                  imgId: 'pricemushrooms',
                  x: 397,
                  y: 320,
                  align: 'mc',
                  index: 'mushrooms',
                  action: 'checkPrice'
                }, {
                  imgId: 'pricepeachJam',
                  x: 347,
                  y: 406,
                  align: 'mc',
                  index: 'peach',
                  action: 'checkPrice'
                }, {
                  imgId: 'pricepeppers',
                  x: 477,
                  y: 313,
                  align: 'mc',
                  index: 'peppers',
                  action: 'checkPrice'
                }
              ],
              drags: [],
              targets: []
            },
            steps: [
              {
                type: 'txt',
                text: 'It\'s three dollars and ten cents.',
                success: 'peach',
                show: 'letraU'
              }, {
                type: 'txt',
                text: 'They\'re three dollars a kilo.',
                success: 'carrots',
                show: 'letraS'
              }, {
                type: 'txt',
                text: 'It\'s ninety-five cents.',
                success: 'cream',
                show: 'letraS2'
              }, {
                type: 'txt',
                text: 'It\'s one dollar and fifty cents.',
                success: 'butter',
                show: 'letraR'
              }, {
                type: 'txt',
                text: 'They\'re two dollars and seventy-five cents.',
                success: 'chilis',
                show: 'letraM2'
              }, {
                type: 'txt',
                text: 'They\'re two dollars and forty cents a kilo.',
                success: 'peppers',
                show: 'letraO2'
              }, {
                type: 'txt',
                text: 'They\'re two dollars and seventy-five cents a kilo.',
                success: 'eggs',
                show: 'letraH'
              }, {
                type: 'txt',
                text: 'It\'s four dollars and fifty cents.',
                success: 'blueberry',
                show: 'letraM'
              }, {
                type: 'txt',
                text: 'They\'re four dollars and five cents a kilo.',
                success: 'mushrooms',
                show: 'letraO'
              }
            ]
          }, {
            background: {
              name: 'propbg',
              x: 426,
              y: 308,
              align: 'mc'
            },
            components: {
              texts: [],
              images: [
                {
                  name: 'abuelita',
                  imgId: 'propabuelita',
                  x: 554,
                  y: 254,
                  align: 'mc',
                  index: 15
                }
              ],
              containers: [],
              buttons: [],
              drags: [
                {
                  type: 'img',
                  imgId: 'letraM',
                  x: 501,
                  y: 407,
                  align: 'mc'
                }, {
                  type: 'img',
                  imgId: 'letraU',
                  x: 324,
                  y: 408,
                  align: 'mc'
                }, {
                  type: 'img',
                  imgId: 'letraS',
                  x: 563,
                  y: 323,
                  align: 'mc'
                }, {
                  type: 'img',
                  imgId: 'letraH',
                  x: 303,
                  y: 317,
                  align: 'mc'
                }, {
                  type: 'img',
                  imgId: 'letraR',
                  x: 314,
                  y: 213,
                  align: 'mc'
                }, {
                  type: 'img',
                  imgId: 'letraO',
                  x: 374,
                  y: 316,
                  align: 'mc'
                }, {
                  type: 'img',
                  name: 'letraO2',
                  imgId: 'letraO',
                  x: 454,
                  y: 316,
                  align: 'mc'
                }, {
                  type: 'img',
                  name: 'letraM2',
                  imgId: 'letraM',
                  x: 576,
                  y: 163,
                  align: 'mc'
                }, {
                  type: 'img',
                  name: 'letraS2',
                  imgId: 'letraS',
                  x: 389,
                  y: 257,
                  align: 'mc'
                }
              ],
              targets: []
            },
            steps: [
              {
                type: 'word',
                text: 'mushrooms'
              }
            ]
          }
        ]
      };
      U2A3.__super__.constructor.call(this);
    }

    return U2A3;

  })(Oda);

  window.oda = new U2A3();

  /*
  class ContainerFactory
  	makeContainer: (opts) ->
  		switch opts.type
  			when 'label' then new LabelContainer opts
  
  class LabelContainer
  	LabelContainer.prototype = new createjs.Container()
  	LabelContainer::Container_initialize = LabelContainer::initialize
  	LabelContainer::initialize = (opts) ->
  		@Container_initialize()
  		@name = opts.name
  		@x = opts.x
  		@y = opts.y
  		@text = new createjs.Text opts.text,opts.font,opts.color
  		@text.name = opts.name
  		@text.textAlign = opts.align ? 'left'
  		@addChild @text
  		@text
  	constructor: (opts) ->
  		@initialize opts
  	update: (txt) ->
  		@text.text = txt
  		if @text.alpha is 0 then TweenLite.to @text, 0.5, {alpha: 1, y: 0} else TweenLite.from @text, 0.5, {alpha: 0, y: @text.y + 20}
  	delete: ->
  		TweenLite.to @text, 0.5, {alpha: 0, y: @text.y + 20}
  class U2A3 extends Oda
  	constructor: ->
  		manifest = [
  			{id: 'head', src: 'pleca1.png'}
  		    {id:'c1' , src: 'circle1.png'}
  		    {id:'c2' , src: 'circle2.png'}
  		    {id:'letraM', src:'letra_M.png'}
  			{id:'letraU', src:'letra_U.png'}
  			{id:'letraS', src:'letra_S.png'}
  			{id:'letraH', src:'letra_H.png'}
  			{id:'letraR', src:'letra_R.png'}
  			{id:'letraO', src:'letra_O.png'}
  			{id:'mush', src:'mush.png'}
  			{id:'priceblueberryJam', src:'price_blueberryJam.png'}
  			{id:'pricebutter', src:'price_butter.png'}
  			{id:'pricecarrots', src:'price_carrots.png'}
  			{id:'pricechilis', src:'price_chilis.png'}
  			{id:'pricecream', src:'price_cream.png'}
  			{id:'priceeggs', src:'price_eggs.png'}
  			{id:'pricemushrooms', src:'price_mushrooms.png'}
  			{id:'pricepeachJam', src:'price_peachJam.png'}
  			{id:'pricepeppers', src:'price_peppers.png'}
  			{id:'propabuelita', src:'prop_abuelita.png'}
  			{id:'propbg', src:'prop_bg.png'}
  			{id:'clue', src:'text_clue.png'}
  		]
  		sounds = [
  			{src:'sounds/good.mp3', id:'good'}
  			{src:'sounds/TU3_U2_A3_Instructions.mp3', id:'instructions'}
  		    {src:'sounds/TU3_U2_A3_Instructions2.mp3', id:'instructions2'}
  		    {src:'sounds/wrong.mp3', id:'wrong'}
  		]
  		@game =
  			header:'head'
  			scenes:[
  				{
  					instructions: 'Read the price and click on the correct item.'
  					container: {name: 'market'}
  					background: {name: 'propbg', x: 426, y: 308, align: 'mc'}
  					components: {
  						texts: [
  						]
  						images: [
  							{name: 'abuelita', imgId: 'propabuelita', x:554, y:254, align: 'mc'}
  							{imgId: 'letraM', x:501, y:407, align: 'mc'}
  							{imgId: 'letraU', x:324, y:408, align: 'mc'}
  							{imgId: 'letraS', x:563, y:323, align: 'mc'}
  							{imgId: 'letraH', x:303, y:317, align: 'mc'}
  							{imgId: 'letraR', x:314, y:213, align: 'mc'}
  							{imgId: 'letraO', x:374, y:316, align: 'mc'}
  							{name: 'letraO2', imgId: 'letraO', x:454, y:316, align: 'mc'}
  							{name: 'letraM2', imgId: 'letraM', x:576, y:163, align: 'mc'}
  							{name: 'letraS2', imgId: 'letraS', x:389, y:257, align: 'mc'}
  						]
  						containers: [
  							{type: 'label', name: 'answerlbl', text: '', font: '15px Quicksand', color: '#333', x: 415, y: 530, align: 'center'}
  						]
  						buttons: [
  							{imgId: 'priceblueberryJam', x:521, y:404, align: 'mc', index: 'blueberry', action: 'checkPrice'}
  							{imgId: 'pricebutter', x:350, y:218, align: 'mc', index: 'butter', action: 'checkPrice'}
  							{imgId: 'pricecarrots', x:584, y:314, align: 'mc', index: 'carrots', action: 'checkPrice'}
  							{imgId: 'pricechilis', x:580, y:176, align: 'mc', index: 'chilis', action: 'checkPrice'}
  							{imgId: 'pricecream', x:416, y:253, align: 'mc', index: 'cream', action: 'checkPrice'}
  							{imgId: 'priceeggs', x:322, y:315, align: 'mc', index: 'eggs', action: 'checkPrice'}
  							{imgId: 'pricemushrooms', x:397, y:320, align: 'mc', index: 'mushrooms', action: 'checkPrice'}
  							{imgId: 'pricepeachJam', x:347, y:406, align: 'mc', index: 'peach', action: 'checkPrice'}
  							{imgId: 'pricepeppers', x:477, y:313, align: 'mc', index: 'peppers', action: 'checkPrice'}
  						]
  						drags: [
  						]
  						targets: [
  						]
  					}
  					steps: [
  						{type: 'txt', text:'It\'s three dollars and ten cents.', success: 'peach', show: 'letraU'}
  						{type: 'txt', text:'They\'re three dollars a kilo.', success: 'carrots', show: 'letraS'}
  						{type: 'txt', text:'It\'s ninety-five cents.', success: 'cream', show: 'letraS2'}
  						{type: 'txt', text:'It\'s one dollar and fifty cents.', success: 'butter', show: 'letraR'}
  						{type: 'txt', text:'They\'re two dollars and seventy-five cents.', success: 'chilis', show: 'letraM2'}
  						{type: 'txt', text:'They\'re two dollars and forty cents a kilo.', success: 'peppers', show: 'letraO2'}
  						{type: 'txt', text:'They\'re two dollars and seventy-five cents a kilo.', success: 'eggs', show: 'letraH'}
  						{type: 'txt', text:'It\'s four dollars and fifty cents.', success: 'blueberry', show: 'letraM'}
  						{type: 'txt', text:'They\'re four dollars and five cents a kilo.', success: 'mushrooms', show: 'letraO'}
  					]
  				}
  				{
  					instructions: 'Read the price and click on the correct item.'
  					container: {name: 'market'}
  					background: {name: 'propbg', x: 426, y: 308, align: 'mc'}
  					components: {
  						texts: [
  						]
  						images: [
  							{name: 'abuelita', imgId: 'propabuelita', x:554, y:254, align: 'mc', index: 15}
  						]
  						containers: [
  						]
  						buttons: [
  						]
  						drags: [
  							{type: 'img', imgId: 'letraM', x:501, y:407, align: 'mc'}
  							{type: 'img', imgId: 'letraU', x:324, y:408, align: 'mc'}
  							{type: 'img', imgId: 'letraS', x:563, y:323, align: 'mc'}
  							{type: 'img', imgId: 'letraH', x:303, y:317, align: 'mc'}
  							{type: 'img', imgId: 'letraR', x:314, y:213, align: 'mc'}
  							{type: 'img', imgId: 'letraO', x:374, y:316, align: 'mc'}
  							{type: 'img', name: 'letraO2', imgId: 'letraO', x:454, y:316, align: 'mc'}
  							{type: 'img', name: 'letraM2', imgId: 'letraM', x:576, y:163, align: 'mc'}
  							{type: 'img', name: 'letraS2', imgId: 'letraS', x:389, y:257, align: 'mc'}
  						]
  						targets:[
  						]
  					}
  					steps: [
  						{type: 'word', text:'mushrooms'}
  					]	
  				}
  			]
  		super null, manifest, sounds
  	setStage: ->
  		super
  		@scene = 0
  		totalScore = 0
  		for i in [0..@game.scenes.length - 1]
  			totalScore += @game.scenes[i].steps.length
  		@insertBitmap 'header', @game.header, stageSize.w / 2, 0, 'tc'
  		@addToMain new Score 'score', (@preload.getResult 'c1'), (@preload.getResult 'c2'), 20, 500, totalScore, 0
  		@setScene().hideLetters().introEvaluation()
  	setScene: ->
  		currentScene = @game.scenes[@scene]
  		
  		#Create scene container
  		cname = currentScene.container.name ? 'currentContainer'
  		if @library[cname]
  			c = @library[cname]
  		else
  			c = new createjs.Container()
  			@addToMain c
  		
  		c.name = cname
  		c.x =  currentScene.container.x ? 0
  		c.y =  currentScene.container.y ? 0
  		c.removeAllChildren()
  
  		#Create background for scene container
  		bgname = currentScene.background.name ? 'background'
  		bgx = currentScene.background.x ? 0
  		bgy = currentScene.background.y ? 0
  		bga = currentScene.background.align ? ''
  		b = @createBitmap bgname, bgname, bgx, bgy, bga
  		c.addChild b
  
  		#Create images for scene container
  		for image in currentScene.components.images
  			align = image.align ? ''
  			name = image.name ? image.imgId
  			b = @createBitmap name, image.imgId, image.x, image.y, align
  			c.addChild b
  			@addToLibrary b
  		
  		#Create containers for scene container
  		factory = new ContainerFactory()
  		for container in currentScene.components.containers 
  			co = factory.makeContainer container
  			c.addChild co
  			@addToLibrary co
  
  		#Create buttons for scene container
  		for button in currentScene.components.buttons
  			align = button.align ? ''
  			name = button.name ? button.imgId
  			b = @createBitmap name, button.imgId, button.x, button.y, align
  			b.index = button.index
  			b.addEventListener 'click', @[button.action]
  			c.addChild b
  			@addToLibrary b
  
  		#Create drags for scene container
  		for drag in currentScene.components.drags
  			name = drag.name ? drag.imgId
  			
  			d = new Droppable name, (@preload.getResult drag.imgId), drag.index, drag.x, drag.y, @stage
  			@setReg d, d.width / 2, d.height / 2
  			d.addEventListener 'click', @[drag.action]
  			c.addChild d
  			@addToLibrary d
  
  		for image in currentScene.components.images
  			if image.index
  				@library[image.name].parent.setChildIndex @library[image.name], image.index 
  		
  		@insertInstructions 'instructions', @game.scenes[@scene].instructions, 40, 100
  		@
  	hideLetters: ->
  		letras = ['letraM', 'letraU', 'letraS', 'letraH', 'letraR', 'letraO', 'letraO2', 'letraM2', 'letraS2']
  		for letra in letras
  			@library[letra].visible = off
  		@
  	introEvaluation: ->
  		super
  		TweenLite.from @library.header, 1, {y:-@library.header.height}
  		TweenLite.from @library.instructions, 1, {alpha :0, x: 0, delay: 0.5}
  		TweenLite.from @library[@game.scenes[@scene].container.name], 1, {alpha :0, delay: 1, onComplete: @playInstructions, onCompleteParams: [@]}
  	initEvaluation: ->
  		super
  		if @game.scenes[@scene].steps.length > 0
  			currentStep = @game.scenes[@scene].steps[@index]
  			@library.answerlbl.update currentStep.text
  	checkPrice: (e) =>
  		currentAnswer = @game.scenes[@scene].steps[@index]
  		if e.target.index is currentAnswer.success
  			@library.score.plusOne()
  		else
  			@warning()
  		@library[currentAnswer.show].visible = on
  		TweenLite.to e.target, 0.5, {alpha: 0}
  		@nextStep()
  	nextStep: ->
  		@index++
  		if @index < @game.scenes[@scene].steps.length
  			currentStep = @game.scenes[@scene].steps[@index]
  			@library.answerlbl.update currentStep.text
  		else
  			@nextScene()
  	nextScene: ->
  		@scene++
  		if @scene < @game.scenes.length
  			@setScene @scene
  	finish: ->
  		super
  	window.U2A3 = U2A3
  */


}).call(this);
