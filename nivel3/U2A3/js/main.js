// Generated by CoffeeScript 1.6.3
(function() {
  var U2A3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  U2A3 = (function(_super) {
    __extends(U2A3, _super);

    function U2A3() {
      this.nextEvaluation = __bind(this.nextEvaluation, this);
      this.clearEvaluation = __bind(this.clearEvaluation, this);
      this.finishEvaluation = __bind(this.finishEvaluation, this);
      this.evaluateAnswer3 = __bind(this.evaluateAnswer3, this);
      this.evaluateAnswer2 = __bind(this.evaluateAnswer2, this);
      this.evaluateAnswer1 = __bind(this.evaluateAnswer1, this);
      this.initEvaluation = __bind(this.initEvaluation, this);
      var manifest, sounds;
      manifest = [
        {
          id: 'head',
          src: 'pleca1.png'
        }, {
          id: 'inst',
          src: 'inst.png'
        }, {
          id: 'c1',
          src: 'circle1.png'
        }, {
          id: 'c2',
          src: 'circle2.png'
        }, {
          id: 'letraM',
          src: 'letra_M.png'
        }, {
          id: 'letraU',
          src: 'letra_U.png'
        }, {
          id: 'letraS',
          src: 'letra_S.png'
        }, {
          id: 'letraH',
          src: 'letra_H.png'
        }, {
          id: 'letraR',
          src: 'letra_R.png'
        }, {
          id: 'letraO',
          src: 'letra_O.png'
        }, {
          id: 'mush',
          src: 'mush.png'
        }, {
          id: 'priceblueberryJam',
          src: 'price_blueberryJam.png'
        }, {
          id: 'pricebutter',
          src: 'price_butter.png'
        }, {
          id: 'pricecarrots',
          src: 'price_carrots.png'
        }, {
          id: 'pricechilis',
          src: 'price_chilis.png'
        }, {
          id: 'pricecream',
          src: 'price_cream.png'
        }, {
          id: 'priceeggs',
          src: 'price_eggs.png'
        }, {
          id: 'pricemushrooms',
          src: 'price_mushrooms.png'
        }, {
          id: 'pricepeachJam',
          src: 'price_peachJam.png'
        }, {
          id: 'pricepeppers',
          src: 'price_peppers.png'
        }, {
          id: 'propabuelita',
          src: 'prop_abuelita.png'
        }, {
          id: 'propbg',
          src: 'prop_bg.png'
        }, {
          id: 'clue',
          src: 'text_clue.png'
        }
      ];
      sounds = [
        {
          src: 'sounds/good.mp3',
          id: 'good'
        }, {
          src: 'sounds/TU3_U2_A3_Instructions.mp3',
          id: 'instructions'
        }, {
          src: 'sounds/TU3_U2_A3_Instructions2.mp3',
          id: 'instructions2'
        }, {
          src: 'sounds/wrong.mp3',
          id: 'wrong'
        }
      ];
      this.letras = ['letraM', 'letraU', 'letraS', 'letraH', 'letraR', 'letraO', 'letraO', 'letraM', 'letraS'];
      this.answers = [
        {
          w1: 1,
          w2: 2,
          w3: 2,
          sound: 'song'
        }, {
          w1: 1,
          w2: 1,
          w3: 4,
          sound: 'outside'
        }, {
          w1: 0,
          w2: 0,
          w3: 0,
          sound: 'picture'
        }, {
          w1: 1,
          w2: 3,
          w3: 1,
          sound: 'english'
        }, {
          w1: 0,
          w2: 1,
          w3: 3,
          sound: 'flute'
        }
      ];
      U2A3.__super__.constructor.call(this, null, manifest, sounds);
    }

    U2A3.prototype.setStage = function() {
      U2A3.__super__.setStage.apply(this, arguments);
      this.insertBitmap('header', 'head', stageSize.w / 2, 0, 'tc');
      this.insertInstructions('instructions', 'Listen and drag the clocks to the correct pictures.', 40, 100);
      this.addToMain(new Score('score', this.preload.getResult('c1'), this.preload.getResult('c2'), 20, 500, 5, 0));
      return this.setMarket().setFrase().setDrags().setQuestion().setFinal().introEvaluation();
    };

    U2A3.prototype.setMarket = function() {
      var abuelita, back, blueberry, butter, carrots, chilis, cream, eggs, mushrooms, peach, peppers, tienda;
      tienda = new createjs.Container();
      tienda.x = 0;
      tienda.y = 0;
      back = this.createBitmap('propbg', 'propbg', 426, 308, 'mc');
      blueberry = this.createBitmap('priceblueberryJam', 'priceblueberryJam', 521, 404, 'mc');
      butter = this.createBitmap('pricebutter', 'pricebutter', 350, 218, 'mc');
      carrots = this.createBitmap('pricecarrots', 'pricecarrots', 584, 314, 'mc');
      chilis = this.createBitmap('pricechilis', 'pricechilis', 580, 176, 'mc');
      cream = this.createBitmap('pricecream', 'pricecream', 416, 253, 'mc');
      eggs = this.createBitmap('priceeggs', 'priceeggs', 322, 315, 'mc');
      mushrooms = this.createBitmap('pricemushrooms', 'pricemushrooms', 397, 320, 'mc');
      peach = this.createBitmap('pricepeachJam', 'pricepeachJam', 347, 406, 'mc');
      peppers = this.createBitmap('pricepeppers', 'pricepeppers', 477, 313, 'mc');
      abuelita = this.createBitmap('propabuelita', 'propabuelita', 554, 254, 'mc');
      tienda.addChild(back, blueberry, butter, chilis, cream, eggs, mushrooms, peach, abuelita, carrots, peppers);
      this.addToMain(tienda);
      return this;
    };

    U2A3.prototype.setFrase = function() {
      var precio;
      precio = new createjs.Text('texto del precio', '20px Arial', '#333333');
      precio.x = stageSize.w / 2;
      precio.y = 500;
      precio.textAlign = 'center';
      this.addToMain(precio);
      return this;
    };

    U2A3.prototype.setDrags = function() {
      var letrablueberry, letrabutter, letracarrots, letrachilis, letracream, letraeggs, letramushrooms, letrapeach, letrapeppers;
      letrablueberry = new Draggable('letraM', this.preload.getResult('letraM'), 0, 501, 407);
      letrapeach = new Draggable('letraU', this.preload.getResult('letraU'), 1, 324, 408);
      letracarrots = new Draggable('letraS', this.preload.getResult('letraS'), 2, 563, 323);
      letraeggs = new Draggable('letraH', this.preload.getResult('letraH'), 3, 303, 317);
      letrabutter = new Draggable('letraR', this.preload.getResult('letraR'), 4, 314, 213);
      letramushrooms = new Draggable('letraO', this.preload.getResult('letraO'), 5, 374, 316);
      letrapeppers = new Draggable('letraO', this.preload.getResult('letraO'), 6, 454, 316);
      letrachilis = new Draggable('letraM', this.preload.getResult('letraM'), 7, 576, 163);
      letracream = new Draggable('letraS', this.preload.getResult('letraS'), 8, 389, 257);
      letrablueberry.scaleX = letrapeach.scaleX = letracarrots.scaleX = letraeggs.scaleX = letrabutter.scaleX = letramushrooms.scaleX = letrapeppers.scaleX = letrachilis.scaleX = letracream.scaleX = 0.5;
      letrablueberry.scaleY = letrapeach.scaleY = letracarrots.scaleY = letraeggs.scaleY = letrabutter.scaleY = letramushrooms.scaleY = letrapeppers.scaleY = letrachilis.scaleY = letracream.scaleY = 0.5;
      this.addToMain(letrablueberry, letrapeach, letracarrots, letraeggs, letrabutter, letramushrooms, letrapeppers, letrachilis, letracream);
      return this;
    };

    U2A3.prototype.setQuestion = function() {
      var c, cuadrito, i, palabra, q, _i;
      q = new createjs.Text('What vegetables are small and white?', '20px Arial', '#333333');
      q.x = stageSize.w / 2;
      q.y = 480;
      q.textAlign = 'center';
      this.addToMain(q);
      palabra = new createjs.Container();
      palabra.x = 115;
      palabra.y = 500;
      cuadrito = new createjs.Graphics().beginFill('').drawRect(0, 0, 47, 40).beginStroke('#f00').moveTo(0, 40).lineTo(47, 40);
      for (i = _i = 1; _i <= 9; i = ++_i) {
        c = new createjs.Shape(cuadrito);
        c.x = i * 55;
        palabra.addChild(c);
      }
      this.addToMain(palabra);
      this.insertBitmap('clue', 'clue', stageSize.w / 2, 560, 'tc');
      return this;
    };

    U2A3.prototype.setFinal = function() {
      var final, i, le, _i;
      final = new createjs.Container();
      final.x = 140;
      final.y = 300;
      for (i = _i = 0; _i <= 8; i = ++_i) {
        if (i % 2 === 0) {
          le = this.createBitmap(this.letras[i], this.letras[i], i * 70, 0, 'mc');
        } else {
          le = this.createBitmap(this.letras[i], this.letras[i], i * 70, 30, 'mc');
        }
        final.addChild(le);
      }
      this.insertBitmap('mush', 'mush', 0, 0);
      this.addToMain(final);
      return this;
    };

    U2A3.prototype.introEvaluation = function() {
      U2A3.__super__.introEvaluation.apply(this, arguments);
      TweenLite.from(this.library['header'], 1, {
        y: -this.library['header'].height
      });
      return TweenLite.from(this.library['instructions'], 1, {
        alpha: 0,
        x: 0,
        delay: 0.5
      });
    };

    U2A3.prototype.initEvaluation = function(e) {
      U2A3.__super__.initEvaluation.apply(this, arguments);
      return false;
    };

    U2A3.prototype.evaluateAnswer1 = function(e) {
      var i, pt, _i;
      this.answer = e.target;
      pt = this.library['h1'].globalToLocal(this.stage.mouseX, this.stage.mouseY);
      if (this.library['h1'].hitTest(pt.x, pt.y)) {
        if (this.answer.index === this.answers[this.index].w1) {
          this.answer.visible = false;
          this.library['h1'].changeText(this.answer.text.text);
          this.library['h1'].blink(false);
          this.blink(this.library['backNube1'], false);
          this.library['h2'].blink();
          this.blink(this.library['backNube2']);
          for (i = _i = 1; _i <= 4; i = _i += 1) {
            this.library['p' + i + 'n2'].addEventListener('drop', this.evaluateAnswer2);
          }
          return false;
        } else {
          this.warning();
          return this.answer.returnToPlace();
        }
      } else {
        return this.answer.returnToPlace();
      }
    };

    U2A3.prototype.evaluateAnswer2 = function(e) {
      var i, pt, _i, _results;
      this.answer = e.target;
      pt = this.library['h2'].globalToLocal(this.stage.mouseX, this.stage.mouseY);
      if (this.library['h2'].hitTest(pt.x, pt.y)) {
        if (this.answer.index === this.answers[this.index].w2) {
          this.answer.visible = false;
          this.library['h2'].changeText(this.answer.text.text);
          this.library['h2'].blink(false);
          this.blink(this.library['backNube2'], false);
          this.library['h3'].blink();
          this.blink(this.library['backNube3']);
          _results = [];
          for (i = _i = 1; _i <= 5; i = _i += 1) {
            _results.push(this.library['p' + i + 'n3'].addEventListener('drop', this.evaluateAnswer3));
          }
          return _results;
        } else {
          this.warning();
          return this.answer.returnToPlace();
        }
      } else {
        return this.answer.returnToPlace();
      }
    };

    U2A3.prototype.evaluateAnswer3 = function(e) {
      var pt;
      this.answer = e.target;
      pt = this.library['h3'].globalToLocal(this.stage.mouseX, this.stage.mouseY);
      if (this.library['h3'].hitTest(pt.x, pt.y)) {
        if (this.answer.index === this.answers[this.index].w3) {
          this.answer.visible = false;
          this.library['h3'].changeText(this.answer.text.text);
          this.library['h3'].blink(false);
          this.blink(this.library['backNube3'], false);
          return setTimeout(this.finishEvaluation, 1 * 1000);
        } else {
          this.warning();
          return this.answer.returnToPlace();
        }
      } else {
        return this.answer.returnToPlace();
      }
    };

    U2A3.prototype.finishEvaluation = function() {
      var song;
      this.library['score'].plusOne();
      song = createjs.Sound.play(this.answers[this.index].sound);
      return song.addEventListener('complete', this.clearEvaluation);
    };

    U2A3.prototype.clearEvaluation = function(e) {
      var i, _i, _j, _k, _l;
      for (i = _i = 1; _i <= 2; i = _i += 1) {
        this.library['p' + i + 'n1'].visible = true;
        this.library['p' + i + 'n1'].returnToPlace();
      }
      for (i = _j = 1; _j <= 4; i = _j += 1) {
        this.library['p' + i + 'n2'].visible = true;
        this.library['p' + i + 'n2'].returnToPlace();
      }
      for (i = _k = 1; _k <= 5; i = _k += 1) {
        this.library['p' + i + 'n3'].visible = true;
        this.library['p' + i + 'n3'].returnToPlace();
      }
      for (i = _l = 1; _l <= 3; i = _l += 1) {
        this.library['h' + i].changeText('');
      }
      return TweenLite.to(this.library['characters'], 0.5, {
        scaleX: 1.5,
        scaleY: 1.5,
        alpha: 0,
        ease: Back.easeOut,
        onComplete: this.nextEvaluation
      });
    };

    U2A3.prototype.nextEvaluation = function() {
      var i, _i, _results;
      this.index++;
      if (this.index < this.answers.length) {
        this.library['characters'].currentFrame = this.index;
        this.library['h1'].blink();
        this.blink(this.library['backNube1']);
        TweenLite.to(this.library['characters'], 0.5, {
          scaleX: 1,
          scaleY: 1,
          alpha: 1,
          ease: Back.easeOut
        });
        _results = [];
        for (i = _i = 1; _i <= 2; i = _i += 1) {
          _results.push(this.library['p' + i + 'n1'].addEventListener('drop', this.evaluateAnswer1));
        }
        return _results;
      } else {
        return this.finish();
      }
    };

    U2A3.prototype.blink = function(obj, state) {
      if (state == null) {
        state = true;
      }
      TweenMax.killTweensOf(obj);
      obj.alpha = 1;
      if (state) {
        return TweenMax.to(obj, 0.5, {
          alpha: .5,
          repeat: -1,
          yoyo: true
        });
      }
    };

    U2A3.prototype.finish = function() {
      return U2A3.__super__.finish.apply(this, arguments);
    };

    window.U2A3 = U2A3;

    return U2A3;

  })(Oda);

}).call(this);
