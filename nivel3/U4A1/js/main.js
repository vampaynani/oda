// Generated by CoffeeScript 1.6.3
(function() {
  var U5A3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  U5A3 = (function(_super) {
    __extends(U5A3, _super);

    function U5A3() {
      this.nextEvaluation = __bind(this.nextEvaluation, this);
      this.finishEvaluation = __bind(this.finishEvaluation, this);
      this.evaluateAnswer = __bind(this.evaluateAnswer, this);
      this.initEvaluation = __bind(this.initEvaluation, this);
      var manifest, sounds;
      manifest = [
        {
          id: 'head',
          src: 'pleca1.png'
        }, {
          id: 'inst',
          src: 'inst.png'
        }, {
          id: 'c1',
          src: 'circle1.png'
        }, {
          id: 'c2',
          src: 'circle2.png'
        }, {
          id: 'repeatbtn',
          src: 'repeat-btn.png'
        }, {
          id: 'playagain',
          src: 'play_again.png'
        }, {
          id: 'startgame',
          src: 'start_game.png'
        }, {
          id: 'image',
          src: 'image.png'
        }, {
          id: 'imagebugbite',
          src: 'image_bugbite.png'
        }, {
          id: 'imagechickenpox',
          src: 'image_chickenpox.png'
        }, {
          id: 'imagecold',
          src: 'image_cold.png'
        }, {
          id: 'imagecough',
          src: 'image_cough.png'
        }, {
          id: 'imagecutmyfinger',
          src: 'image_cutmyfinger.png'
        }, {
          id: 'imagecutmyknee',
          src: 'image_cutmyknee.png'
        }, {
          id: 'imageearache',
          src: 'image_earache.png'
        }, {
          id: 'imagefever',
          src: 'image_fever.png'
        }, {
          id: 'imageheadache',
          src: 'image_headache.png'
        }, {
          id: 'imagehiccups',
          src: 'image_hiccups.png'
        }, {
          id: 'imagerunnynose',
          src: 'image_runnynose.png'
        }, {
          id: 'imagesorethroat',
          src: 'image_sorethroat.png'
        }, {
          id: 'imagestomachache',
          src: 'image_stomachache.png'
        }, {
          id: 'imagesunburn',
          src: 'image_sunburn.png'
        }, {
          id: 'imagetoothache',
          src: 'image_toothache.png'
        }
      ];
      sounds = [
        {
          src: 'sounds/good.mp3',
          id: 'good'
        }, {
          src: 'sounds/wrong.mp3',
          id: 'wrong'
        }, {
          src: 'sounds/TU2_U5_A3_instructions.mp3',
          id: 'instructions'
        }
      ];
      this.imagenes = [
        {
          id: 'imagebugbite',
          x: '100',
          y: '100'
        }, {
          id: 'imagechickenpox',
          x: '100',
          y: '100'
        }, {
          id: 'imagecold',
          x: '100',
          y: '100'
        }, {
          id: 'imagecough',
          x: '100',
          y: '100'
        }, {
          id: 'imagecutmyfinger',
          x: '100',
          y: '100'
        }, {
          id: 'imagecutmyknee',
          x: '100',
          y: '100'
        }, {
          id: 'imageearache',
          x: '100',
          y: '100'
        }, {
          id: 'imagefever',
          x: '100',
          y: '100'
        }, {
          id: 'imageheadache',
          x: '100',
          y: '100'
        }, {
          id: 'imagehiccups',
          x: '100',
          y: '100'
        }, {
          id: 'imagerunnynose',
          x: '100',
          y: '100'
        }, {
          id: 'imagesorethroat',
          x: '100',
          y: '100'
        }, {
          id: 'imagestomachache',
          x: '100',
          y: '100'
        }, {
          id: 'imagesunburn',
          x: '100',
          y: '100'
        }, {
          id: 'imagetoothache',
          x: '100',
          y: '100'
        }
      ];
      this.answers = [
        {
          img: 'imagetoothache',
          frase: 'i have a',
          txt: 'toothache'
        }, {
          img: 'imagecutmyfinger',
          frase: 'i',
          txt: 'cut my finger'
        }, {
          img: 'imagerunnynose',
          frase: 'I have a',
          txt: 'runny nose'
        }, {
          img: 'imagecutmyknee',
          frase: 'i',
          txt: 'cut my knee'
        }, {
          img: 'imagefever',
          frase: 'i have a',
          txt: 'fever'
        }, {
          img: 'imagesorethroat',
          frase: 'i have a',
          txt: 'sore throat'
        }, {
          img: 'imagebugbite',
          frase: 'i have a',
          txt: 'bug bite'
        }, {
          img: 'imagestomachache',
          frase: 'i have a',
          txt: 'stomach ache'
        }, {
          img: 'imageearache',
          frase: 'i have a ',
          txt: 'earache'
        }, {
          img: 'imagecold',
          frase: 'i have a',
          txt: 'cold'
        }, {
          img: 'imagehiccups',
          frase: 'i have the',
          txt: 'hiccups'
        }, {
          img: 'imagechickenpox',
          frase: 'i have',
          txt: 'chicken pox'
        }, {
          img: 'imagesunburn',
          frase: 'i have a',
          txt: 'sunburn'
        }, {
          img: 'imageheadache',
          frase: 'i have a',
          txt: 'headache'
        }, {
          img: 'imagecough',
          frase: 'i have a',
          txt: 'cough'
        }
      ];
      U5A3.__super__.constructor.call(this, null, manifest, sounds);
    }

    U5A3.prototype.setStage = function() {
      var x;
      U5A3.__super__.setStage.apply(this, arguments);
      this.success = 1;
      this.insertBitmap('header', 'head', stageSize.w / 2, 0, 'tc');
      x = this.createBitmap('image', 'image', stageSize.w / 2, 20, 'tc');
      x.scaleX = x.scaleY = 1.1;
      this.addToMain(x);
      this.insertBitmap('instructions', 'inst', 20, 100);
      this.addToMain(new Score('score', this.preload.getResult('c1'), this.preload.getResult('c2'), 15, 500, 20, 0));
      return this.setSeasons().introEvaluation();
    };

    U5A3.prototype.setSeasons = function() {
      var i, img, seasons, _i;
      seasons = new createjs.Container();
      seasons.name = 'seasons';
      for (i = _i = 0; _i <= 14; i = ++_i) {
        img = this.createBitmap(this.imagenes[i].id, this.imagenes[i].id, this.imagenes[i].x, this.imagenes[i].y, 'mc');
        this.addToLibrary(img);
        seasons.addChild(img);
      }
      this.addToMain(seasons);
      return this;
    };

    U5A3.prototype.introEvaluation = function() {
      U5A3.__super__.introEvaluation.apply(this, arguments);
      TweenLite.from(this.library['header'], 1, {
        y: -this.library['header'].height
      });
      TweenLite.from(this.library['instructions'], 1, {
        alpha: 0,
        x: 0,
        delay: 0.5
      });
      return TweenLite.from(this.library['seasons'], 0.5, {
        alpha: 0,
        y: this.library['seasons'].y + 20,
        delay: 1,
        onComplete: this.playInstructions,
        onCompleteParams: [this]
      });
    };

    U5A3.prototype.initEvaluation = function(e) {
      U5A3.__super__.initEvaluation.apply(this, arguments);
      this.answers = this.shuffle(this.answers);
      return this.setQuestion(this.index);
    };

    U5A3.prototype.setQuestion = function(question) {
      var col, i, letra, letras, p, palabra, q, wc, _i, _ref;
      letras = new createjs.Container();
      palabra = new createjs.Container();
      col = this.answers[this.index].txt.split('');
      this.scrambled = this.shuffle(col);
      for (i = _i = 1, _ref = this.scrambled.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (this.scrambled[i - 1] !== ' ') {
          letra = new DraggableText("t" + i, this.scrambled[i - 1], this.scrambled[i - 1], i * 30, 0);
          letra.text.font = '20px Quicksand';
          letra.createHitArea(28, 30);
          letra.addEventListener('drop', this.evaluateAnswer);
          letra.onInitEvaluation();
          this.addToLibrary(letra);
          letras.addChild(letra);
        }
        if (col[i - 1] !== ' ') {
          wc = new WordContainer("l" + i, '', 'rgba(238,238,238,0.3)', '#f39234', i * 35, 50, 30, 30);
          wc.index = col[i - 1];
          this.addToLibrary(wc);
          palabra.addChild(wc);
        }
      }
      q = this.createText('q', this.answers[this.index].frase, '24px Quicksand', '#333', 42, 55);
      q.x = 42 - q.getMeasuredWidth() - 20;
      palabra.addChild(q);
      p = this.createText('q', '.', '24px Quicksand', '#333', 42, 55);
      p.x = this.scrambled.length * 35 + 38;
      palabra.addChild(p);
      palabra.name = 'palabra';
      palabra.y = 270;
      palabra.x = stageSize.w / 2 - this.scrambled.length * 35 / 2 - 50 + (q.getMeasuredWidth() + 20) / 2;
      this.addToMain(palabra);
      letras.name = 'letras';
      letras.y = 370;
      letras.x = stageSize.w / 2 - this.scrambled.length * 30 / 2 - 30;
      return this.addToMain(letras);
    };

    U5A3.prototype.evaluateAnswer = function(e) {
      var dropped, i, pt, _i, _ref;
      this.answer = e.target;
      dropped = false;
      for (i = _i = 1, _ref = this.scrambled.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (this.library["l" + i]) {
          pt = this.library["l" + i].globalToLocal(this.stage.mouseX, this.stage.mouseY);
          if (this.library["l" + i].hitTest(pt.x, pt.y)) {
            if (this.library["l" + i].text.text === '') {
              this.answer.visible = false;
              this.library["l" + i].changeText(this.answer.index);
              dropped = true;
            }
          }
        }
      }
      if (!dropped) {
        return this.answer.returnToPlace();
      } else {
        return this.finishEvaluation();
      }
    };

    U5A3.prototype.finishEvaluation = function() {
      var col, i, _i, _j, _k, _ref, _ref1, _ref2;
      col = this.answers[this.index].txt.split('');
      for (i = _i = 1, _ref = this.scrambled.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (this.library["l" + i]) {
          if (this.library["l" + i].text.text === '') {
            return;
          }
        }
      }
      for (i = _j = 1, _ref1 = this.scrambled.length; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
        if (this.library["l" + i]) {
          if (this.library["l" + i].text.text !== col[i - 1]) {
            this.success = 0;
          }
        }
      }
      if (this.success === 1) {
        createjs.Sound.play('good');
        this.library.score.plusOne();
      } else {
        createjs.Sound.play('wrong');
        this.success = 1;
        for (i = _k = 1, _ref2 = this.scrambled.length; 1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 1 <= _ref2 ? ++_k : --_k) {
          this.library["l" + i].text.text = col[i - 1];
        }
      }
      return setTimeout(this.nextEvaluation, 2 * 1000);
    };

    U5A3.prototype.nextEvaluation = function() {
      TweenLite.to(this.library[this.answers[this.index].img], 1, {
        alpha: 0,
        y: this.library[this.answers[this.index].img].y - 20,
        ease: Back.easeOut
      });
      TweenLite.to(this.library.letras, 1, {
        alpha: 0,
        y: this.library['letras'].y - 20,
        ease: Back.easeOut
      });
      TweenLite.to(this.library.palabra, 1, {
        alpha: 0,
        y: this.library['palabra'].y - 20,
        ease: Back.easeOut
      });
      this.index++;
      if (this.index < this.answers.length) {
        return this.setQuestion(this.index);
      } else {
        return this.finish();
      }
    };

    U5A3.prototype.finish = function() {
      return U5A3.__super__.finish.apply(this, arguments);
    };

    window.U5A3 = U5A3;

    return U5A3;

  })(Oda);

}).call(this);
