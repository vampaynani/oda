// Generated by CoffeeScript 1.6.3
(function() {
  var U8A5,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  U8A5 = (function(_super) {
    __extends(U8A5, _super);

    function U8A5() {
      this.nextEvaluation = __bind(this.nextEvaluation, this);
      this.clearEvaluation = __bind(this.clearEvaluation, this);
      this.finishEvaluation = __bind(this.finishEvaluation, this);
      this.evaluateAnswer = __bind(this.evaluateAnswer, this);
      this.initEvaluation = __bind(this.initEvaluation, this);
      var manifest, sounds;
      manifest = [
        {
          id: 'head',
          src: 'pleca1.png'
        }, {
          id: 'c1',
          src: 'circle1.png'
        }, {
          id: 'c2',
          src: 'circle2.png'
        }, {
          id: 'playagain',
          src: 'play_again.png'
        }, {
          id: 'startgame',
          src: 'start_game.png'
        }, {
          id: 'propbg',
          src: 'prop_bg.png'
        }, {
          id: 'propwords',
          src: 'prop_words.png'
        }, {
          id: 'img1',
          src: 'img_1.png'
        }, {
          id: 'img2',
          src: 'img_2.png'
        }, {
          id: 'img3',
          src: 'img_3.png'
        }, {
          id: 'img4',
          src: 'img_4.png'
        }, {
          id: 'img5',
          src: 'img_5.png'
        }, {
          id: 'img6',
          src: 'img_6.png'
        }, {
          id: 'img7',
          src: 'img_7.png'
        }, {
          id: 'img8',
          src: 'img_8.png'
        }, {
          id: 'img9',
          src: 'img_9.png'
        }, {
          id: 'img10',
          src: 'img_10.png'
        }
      ];
      sounds = [
        {
          src: 'sounds/good.mp3',
          id: 'good'
        }, {
          src: 'sounds/boing.mp3',
          id: 'boing'
        }, {
          src: 'sounds/TU3_U8_A5_instructions.mp3',
          id: 'instructions'
        }, {
          src: 'sounds/wrong.mp3',
          id: 'wrong'
        }
      ];
      this.game = {
        images: [
          {
            id: 'img1',
            x: 660,
            y: 208
          }, {
            id: 'img2',
            x: 642,
            y: 295
          }, {
            id: 'img3',
            x: 594,
            y: 399
          }, {
            id: 'img4',
            x: 487,
            y: 445
          }, {
            id: 'img5',
            x: 275,
            y: 366
          }, {
            id: 'img6',
            x: 407,
            y: 223
          }, {
            id: 'img7',
            x: -8,
            y: 287
          }, {
            id: 'img8',
            x: 430,
            y: 409
          }, {
            id: 'img9',
            x: 490,
            y: 300
          }, {
            id: 'img10',
            x: 658,
            y: 414
          }
        ],
        steps: [
          {
            pattern: ["#wc", "climbed out of the water first?", "#br", "Honupo'okea, the Great Mother Turtle."],
            targets: ['Who']
          }, {
            pattern: ["#wc", "did Honupo'okea create a nest with her flippers?", "#br", "She created a nest for her egg."],
            targets: ['Why']
          }, {
            pattern: ["#wc", "waited in the water while Honupo'okea built her nest?", "#br", "Honu'ea, the Great Father Turtle."],
            targets: ['Who']
          }, {
            pattern: ["#wc", "did the egg look like?", "#br", "It was completely round and smooth."],
            targets: ['What']
          }, {
            pattern: ["#wc", "did Honupo'okea cover the egg?", "#br", "She brushed soft, Black sand over it."],
            targets: ['how']
          }, {
            pattern: ["#wc", "did the two turtles create next?", "#br", "They created a pool of fresh water."],
            targets: ['What']
          }, {
            pattern: ["#wc", "did the two turtles go after that?", "#br", "They returned to the ocean."],
            targets: ['Where']
          }, {
            pattern: ["#wc", "did Honupo'okea come back to the beach?", "#br", "When her egg was going to hatch."],
            targets: ['When']
          }, {
            pattern: ["#wc", "wasn't Kauila a turtle at the end?", "#br", "She became a human girl."],
            targets: ['why']
          }, {
            pattern: ["#wc", "does Kauila live now?", "#br", "She continues to live by her pool of fresh water."],
            targets: ['Where']
          }
        ]
      };
      U8A5.__super__.constructor.call(this, null, manifest, sounds);
    }

    U8A5.prototype.setStage = function() {
      U8A5.__super__.setStage.apply(this, arguments);
      this.insertBitmap('header', 'head', stageSize.w / 2, 0, 'tc');
      this.insertInstructions('instructions', 'Find and click on ten objects. Then drag the words to complete the questions.', 40, 100);
      this.steps = this.game.steps;
      this.setScene().setWords();
      this.setDropper(1).introEvaluation();
      return this.addToMain(new Score('score', this.preload.getResult('c1'), this.preload.getResult('c2'), 20, 500, 20, 0));
    };

    U8A5.prototype.setScene = function() {
      var escena, fondo, i, m, _i;
      escena = new createjs.Container();
      escena.name = 'escena';
      fondo = this.createBitmap('propbg', 'propbg', -14, 120);
      escena.addChild(fondo);
      for (i = _i = 1; _i <= 10; i = ++_i) {
        m = this.createBitmap(this.game.images[i - 1].id, this.game.images[i - 1].id, this.game.images[i - 1].x, this.game.images[i - 1].y);
        escena.addChild(m);
      }
      this.addToMain(escena);
      return this;
    };

    U8A5.prototype.setWords = function() {
      var fondo, p1, p2, p3, p4, p5, p6, palabras;
      palabras = new createjs.Container();
      palabras.name = 'palabras';
      palabras.x = 163;
      palabras.y = 443;
      fondo = this.createBitmap('propwords', 'propwords', 0, 0);
      palabras.addChild(fondo);
      p1 = new DroppableText("p1", 'When', 'When', 30, 14, this.stage);
      p2 = new DroppableText("p2", 'Who', 'Who', 110, 14, this.stage);
      p3 = new DroppableText("p3", 'What', 'What', 180, 14, this.stage);
      p4 = new DroppableText("p4", 'Where', 'Where', 250, 14, this.stage);
      p5 = new DroppableText("p5", 'Why', 'Why', 335, 14, this.stage);
      p6 = new DroppableText("p6", 'How', 'How', 410, 14, this.stage);
      this.addToLibrary(p1, p2, p3, p4, p5, p6);
      palabras.addChild(p1, p2, p3, p4, p5, p6);
      return this.addToMain(palabras);
    };

    U8A5.prototype.setDropper = function(step) {
      var dropper, h, i, j, npos, ny, t, txt, _i, _len, _ref;
      this.step = step;
      if (this.library.dropper && this.mainContainer.contains(this.library.dropper)) {
        dropper = this.library.dropper;
      } else {
        dropper = new createjs.Container();
        dropper.x = 220;
        dropper.y = 500;
        dropper.name = 'dropper';
        this.addToMain(dropper);
      }
      dropper.removeAllChildren();
      i = 0;
      j = 0;
      npos = 0;
      this.targets = new Array();
      _ref = this.steps[step - 1].pattern;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        ny = j * 30 + 7;
        if (t === '#br') {
          npos = 0;
          j++;
        } else if (t === '#wc') {
          txt = this.steps[step - 1].targets[i];
          h = new WordContainer("h" + i, "" + txt, '#FFF', '#F00', npos, ny);
          h.text.font = '17px Quicksand';
          h.index = i;
          dropper.addChild(h);
          this.addToLibrary(h);
          this.targets.push(h);
          npos += h.width + 7;
          i++;
        } else {
          h = this.createText('', t, '17px Quicksand', '#333', npos, ny);
          dropper.addChild(h);
          npos += h.getMeasuredWidth() + 12;
          console.log(npos);
          if (j === 0) {
            dropper.x = stageSize.w / 2 - npos / 2 - 12;
          } else {
            h.x = stageSize.w / 2 - npos / 2 - 12 - dropper.x;
          }
        }
      }
      return this;
    };

    U8A5.prototype.introEvaluation = function() {
      U8A5.__super__.introEvaluation.apply(this, arguments);
      TweenLite.from(this.library.header, 1, {
        y: -this.library.header.height
      });
      TweenLite.from(this.library.instructions, 1, {
        alpha: 0,
        x: 0,
        delay: 0.5
      });
      TweenLite.from(this.library.palabras, 1, {
        alpha: 0,
        delay: 1
      });
      TweenLite.from(this.library.escena, 1, {
        alpha: 0,
        delay: 1
      });
      return TweenLite.from(this.library.dropper, 1, {
        alpha: 0,
        y: this.library.dropper.y + 20,
        delay: 1,
        onComplete: this.playInstructions,
        onCompleteParams: [this]
      });
    };

    U8A5.prototype.initEvaluation = function(e) {
      var i, _i, _results;
      U8A5.__super__.initEvaluation.apply(this, arguments);
      _results = [];
      for (i = _i = 1; _i <= 6; i = _i += 1) {
        this.library["p" + i].updateDrops(this.targets);
        this.library["p" + i].addEventListener('dropped', this.evaluateAnswer);
        _results.push(this.library["p" + i].initDragListener());
      }
      return _results;
    };

    U8A5.prototype.evaluateAnswer = function(e) {
      this.answer = e.target;
      this.drop = e.drop;
      if (this.answer.index === this.steps[this.step - 1].targets[this.drop.index]) {
        this.answer.visible = false;
        this.drop.changeText(this.answer.index);
        this.finishEvaluation();
        if (this.intento === 0) {
          this.library['score'].plusOne();
        }
        return this.intento = 0;
      } else {
        this.warning();
        this.intento = 1;
        return this.answer.returnToPlace();
      }
    };

    U8A5.prototype.finishEvaluation = function() {
      var target, _i, _len, _ref;
      createjs.Sound.play('good');
      _ref = this.targets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        if (target.text.text === '') {
          return;
        }
      }
      return setTimeout(this.clearEvaluation, 1 * 1000);
    };

    U8A5.prototype.clearEvaluation = function(e) {
      var i, _i;
      for (i = _i = 1; _i <= 6; i = _i += 1) {
        this.library["p" + i].visible = true;
        this.library["p" + i].returnToPlace();
      }
      return TweenLite.to(this.library.dropper, 0.5, {
        alpha: 0,
        y: this.library.dropper.y + 20,
        onComplete: this.nextEvaluation
      });
    };

    U8A5.prototype.nextEvaluation = function() {
      var i, _i;
      this.index++;
      if (this.index < this.steps.length) {
        this.setDropper(this.index + 1);
        for (i = _i = 1; _i <= 6; i = _i += 1) {
          this.library["p" + i].updateDrops(this.targets);
        }
        return TweenLite.to(this.library.dropper, 0.5, {
          alpha: 1,
          y: 500
        });
      } else {
        return this.finish();
      }
    };

    U8A5.prototype.finish = function() {
      return U8A5.__super__.finish.apply(this, arguments);
    };

    window.U8A5 = U8A5;

    return U8A5;

  })(Oda);

}).call(this);
