// Generated by CoffeeScript 1.6.3
(function() {
  var U1A2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  U1A2 = (function(_super) {
    __extends(U1A2, _super);

    function U1A2() {
      this.repeatSound = __bind(this.repeatSound, this);
      this.nextEvaluation = __bind(this.nextEvaluation, this);
      this.finishEvaluation = __bind(this.finishEvaluation, this);
      this.evaluateAnswer = __bind(this.evaluateAnswer, this);
      this.initEvaluation = __bind(this.initEvaluation, this);
      var manifest, sounds;
      manifest = [
        {
          id: 'head',
          src: 'pleca.png'
        }, {
          id: 'inst',
          src: 'texto_look.png'
        }, {
          id: 'c1',
          src: 'circle1.png'
        }, {
          id: 'c2',
          src: 'circle2.png'
        }, {
          id: 'repeatbtn',
          src: 'repeat-btn.png'
        }, {
          id: 'playagain',
          src: 'play_again.png'
        }, {
          id: 'startgame',
          src: 'start_game.png'
        }, {
          id: 'ticketArt',
          src: 'ticket_art.png'
        }, {
          id: 'ticketBug',
          src: 'ticket_bug.png'
        }, {
          id: 'ticketDinosaur',
          src: 'ticket_dinosaur.png'
        }, {
          id: 'ticketDolphin',
          src: 'ticket_dolphin.png'
        }, {
          id: 'ticketElephant',
          src: 'ticket_elephant.png'
        }, {
          id: 'ticketPiano',
          src: 'ticket_piano.png'
        }, {
          id: 'ticketPuppet',
          src: 'ticket_puppet.png'
        }, {
          id: 'ticketSpace',
          src: 'ticket_space.png'
        }
      ];
      sounds = [
        {
          src: 'sounds/boing.mp3',
          id: 'boing'
        }, {
          src: 'sounds/TU2_U4_A6_instructions.mp3',
          id: 'instructions'
        }
      ];
      this.answers = [];
      this.tickets = [
        {
          id: 'ticketArt',
          x: '315',
          y: '178',
          preguntaUno: '',
          pUnoOpcionUno: '',
          pUnoOpcionDos: '',
          preguntaDos: '',
          pDosOpcionUno: '',
          pDosOpcionDos: ''
        }, {
          id: 'ticketBug',
          x: '549',
          y: '178',
          preguntaUno: 'How much does it cost?',
          pUnoOpcionUno: 'It cost nine dollars.',
          pUnoOpcionDos: 'It cost thirty-six dollars',
          preguntaDos: 'What time does it open',
          pDosOpcionUno: 'It opens at three thirty.',
          pDosOpcionDos: 'It opens at eleven thirty.'
        }, {
          id: 'ticketDinosaur',
          x: '209',
          y: '284',
          preguntaUno: '',
          pUnoOpcionUno: '',
          pUnoOpcionDos: '',
          preguntaDos: '',
          pDosOpcionUno: '',
          pDosOpcionDos: ''
        }, {
          id: 'ticketDolphin',
          x: '425',
          y: '319',
          preguntaUno: '',
          pUnoOpcionUno: '',
          pUnoOpcionDos: '',
          preguntaDos: '',
          pDosOpcionUno: '',
          pDosOpcionDos: ''
        }, {
          id: 'ticketElephant',
          x: '638',
          y: '284',
          preguntaUno: '',
          pUnoOpcionUno: '',
          pUnoOpcionDos: '',
          preguntaDos: '',
          pDosOpcionUno: '',
          pDosOpcionDos: ''
        }, {
          id: 'ticketPiano',
          x: '205',
          y: '414',
          preguntaUno: '',
          pUnoOpcionUno: '',
          pUnoOpcionDos: '',
          preguntaDos: '',
          pDosOpcionUno: '',
          pDosOpcionDos: ''
        }, {
          id: 'ticketPuppet',
          x: '423',
          y: '452',
          preguntaUno: '',
          pUnoOpcionUno: '',
          pUnoOpcionDos: '',
          preguntaDos: '',
          pDosOpcionUno: '',
          pDosOpcionDos: ''
        }, {
          id: 'ticketSpace',
          x: '641',
          y: '414',
          preguntaUno: '',
          pUnoOpcionUno: '',
          pUnoOpcionDos: '',
          preguntaDos: '',
          pDosOpcionUno: '',
          pDosOpcionDos: ''
        }
      ];
      U1A2.__super__.constructor.call(this, null, manifest, sounds);
    }

    U1A2.prototype.setStage = function() {
      U1A2.__super__.setStage.apply(this, arguments);
      this.insertBitmap('header', 'head', stageSize.w / 2, 0, 'tc');
      this.insertBitmap('instructions', 'inst', 20, 100);
      this.addToMain(new Score('score', this.preload.getResult('c1'), this.preload.getResult('c2'), 20, 500, 5, 0));
      return this.setTickets().setTicketQuestion().introEvaluation();
    };

    U1A2.prototype.setTickets = function() {
      var i, tickets, v, _i;
      tickets = new createjs.Container();
      tickets.x = 0;
      tickets.y = 0;
      for (i = _i = 0; _i <= 7; i = ++_i) {
        v = this.createBitmap(this.tickets[i].id, this.tickets[i].id, this.tickets[i].x, this.tickets[i].y, 'mc');
        v.scaleX = v.scaleY = 0.25;
        tickets.addChild(v);
        this.addToLibrary(v);
      }
      this.addToMain(tickets);
      return this;
    };

    U1A2.prototype.setTicketQuestion = function() {
      var diagonal, dos, i, opciones, text, tickets, total, uno, v, _i;
      tickets = new createjs.Container();
      tickets.x = 0;
      tickets.y = 0;
      for (i = _i = 0; _i <= 7; i = ++_i) {
        v = this.createBitmap(this.tickets[i].id, this.tickets[i].id, stageSize.w / 2, stageSize.h / 2, 'mc');
        v.scaleX = v.scaleY = 0.45;
        tickets.addChild(v);
        this.addToLibrary(v);
        text = new createjs.Text(this.tickets[i].preguntaUno, '24px Arial', '#333');
        text.x = stageSize.w / 2;
        text.y = 410;
        text.textAlign = 'center';
        tickets.addChild(text);
        opciones = new createjs.Container();
        uno = new ClickableText(this.tickets[i].pUnoOpcionUno, this.tickets[i].pUnoOpcionUno, i, 0, 0);
        opciones.addChild(uno);
        diagonal = new createjs.Text(' / ', '24px Arial', '#333');
        diagonal.x = uno.x + uno.width;
        diagonal.y = 0;
        opciones.addChild(diagonal);
        dos = new ClickableText(this.tickets[i].pUnoOpcionDos, this.tickets[i].pUnoOpcionDos, i, diagonal.x + 24, 0);
        opciones.addChild(dos);
        total = uno.width + dos.width + 20;
        opciones.x = stageSize.w / 2 - total / 2;
        opciones.y = 450;
        tickets.addChild(opciones);
      }
      this.addToMain(tickets);
      return this;
    };

    U1A2.prototype.introEvaluation = function() {
      return U1A2.__super__.introEvaluation.apply(this, arguments);
      /*
      		for i in [1..6] by 1
      			@observer.subscribe 'init_evaluation', @library['name'+i].onInitEvaluation
      
      		@library['characters'].currentFrame = @answers[@index].id
      
      		TweenLite.from @library['header'], 1, {y:-@library['header'].height}
      		TweenLite.from @library['instructions'], 1, {alpha :0, x: 0, delay: 0.5}
      		TweenLite.from @library['names'], 1, {alpha: 0, y: @library['names'].y + 50, delay: 1}
      		TweenLite.from @library['dropname'], 1, {alpha: 0, y: @library['dropname'].y + 50, delay: 1}
      		TweenLite.from @library['characters'], 1, {alpha: 0, y: @library['characters'].y + 20, delay: 1.5, onComplete: @playInstructions, onCompleteParams: [@]}
      */

    };

    U1A2.prototype.initEvaluation = function(e) {
      U1A2.__super__.initEvaluation.apply(this, arguments);
      this.library['characters'].currentFrame = this.answers[this.index].id;
      createjs.Sound.play(this.answers[this.index].sound);
      return TweenLite.to(this.library['characters'], 0.5, {
        alpha: 1,
        y: stageSize.h - 180,
        ease: Quart.easeOut
      });
    };

    U1A2.prototype.evaluateAnswer = function(e) {
      var pt;
      this.answer = e.target;
      pt = this.library['dropname'].globalToLocal(this.stage.mouseX, this.stage.mouseY);
      if (this.library['dropname'].hitTest(pt.x, pt.y)) {
        if (this.answer.index === this.answers[this.index].id) {
          this.answer.blink(false);
          return setTimeout(this.finishEvaluation, 1 * 1000);
        } else {
          this.warning();
          return this.answer.returnToPlace();
        }
      } else {
        return this.answer.returnToPlace();
      }
    };

    U1A2.prototype.finishEvaluation = function() {
      TweenLite.to(this.library['characters'], 0.5, {
        alpha: 0,
        y: -200,
        ease: Back.easeOut,
        onComplete: this.nextEvaluation
      });
      return this.answer.returnToPlace();
    };

    U1A2.prototype.nextEvaluation = function() {
      this.index++;
      if (this.index < this.answers.length) {
        this.library['score'].updateCount(this.index);
        this.library['characters'].alpha = 1;
        this.library['characters'].y = stageSize.h - 180;
        this.library['characters'].currentFrame = this.answers[this.index].id;
        createjs.Sound.play(this.answers[this.index].sound);
        return TweenLite.from(this.library['characters'], 0.5, {
          alpha: 0,
          y: this.library['characters'].y + 20,
          ease: Quart.easeOut
        });
      } else {
        return this.finish();
      }
    };

    U1A2.prototype.repeatSound = function() {
      return createjs.Sound.play(this.answers[this.index].sound);
    };

    U1A2.prototype.finish = function() {
      var i, _i, _results;
      U1A2.__super__.finish.apply(this, arguments);
      _results = [];
      for (i = _i = 1; _i <= 6; i = _i += 1) {
        _results.push(this.library['name' + i].blink(false));
      }
      return _results;
    };

    window.U1A2 = U1A2;

    return U1A2;

  })(Oda);

}).call(this);
